var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/CoreModule.html",[0,2.008,1,1.656]],["body/modules/CoreModule.html",[1,2.945,2,2.554,3,0.94,4,0.779,5,0.779,6,3.923,7,1.525,8,0.063,9,4.523,10,3.097,11,4.523,12,3.097,13,3.923,14,0.94,15,0.149,16,0.048,17,0.056,18,0.048]],["title/classes/Datation.html",[15,0.097,19,0.726]],["body/classes/Datation.html",[3,0.276,4,0.613,5,0.228,7,0.387,8,0.065,14,0.67,15,0.044,16,0.034,17,0.034,18,0.014,19,1.408,20,0.455,21,0.534,22,1.048,23,1.32,24,0.955,25,0.955,26,1.106,27,0.879,28,1.281,29,0.388,30,0.54,31,1.413,32,2.388,33,2.143,34,1.819,35,1.819,36,1.53,37,1.819,38,2.475,39,0.853,40,1.036,41,1.892,42,2.411,43,1.497,44,1.892,45,1.319,46,1.892,47,1.299,48,2.411,49,1.299,50,1.892,51,1.106,52,1.892,53,1.892,54,1.819,55,1.892,56,1.892,57,1.232,58,0.748,59,1.232,60,2.155,61,1.892,62,1.036,63,0.882,64,1.232,65,1.232,66,2.163,67,1.865,68,1.939,69,0.721,70,1.406,71,1.232,72,1.232,73,1.232,74,1.316,75,1.15,76,1.413,77,1.448,78,1.15,79,1.15,80,1.15,81,1.15,82,1.15,83,1.15,84,1.232,85,1.15,86,1.232,87,1.12,88,1.232,89,1.279,90,1.232,91,1.15,92,1.865,93,0.908,94,1.569,95,0.897,96,1.997,97,1.15,98,1.232,99,1.15,100,1.819,101,1.494,102,0.748,103,1.15,104,1.003,105,1.15,106,0.908,107,1.232,108,1.191,109,1.15,110,1.53,111,1.106,112,1.232,113,1.041,114,1.723,115,1.12,116,2.044,117,1.232,118,1.15,119,1.299,120,1.15,121,1.121,122,1.15,123,1.299,124,1.15,125,1.923,126,1.232,127,1.15,128,1.15,129,1.15,130,1.15,131,1.15,132,1.15,133,1.15,134,1.15,135,0.908,136,0.908,137,1.15,138,1.15,139,1.15,140,1.15,141,1.15,142,1.15,143,1.12,144,0.749,145,1.15,146,1.622,147,1.15,148,1.232,149,0.749,150,1.15,151,1.106,152,0.749,153,0.879,154,1.15,155,1.15,156,1.232,157,1.15,158,1.15,159,1.232,160,1.15,161,1.232,162,1.232,163,1.32,164,1.569,165,1.819,166,1.232,167,1.232,168,1.232,169,1.232,170,1.232,171,1.232,172,1.819,173,1.232,174,1.232,175,1.036,176,1.232,177,1.232,178,1.232,179,1.232,180,2.286,181,1.232,182,1.32,183,1.232,184,1.232,185,1.232,186,1.232,187,1.819,188,1.232,189,1.232,190,1.121,191,1.232,192,1.15,193,1.232,194,2.022,195,1.036,196,0.748,197,1.15,198,0.879,199,1.391,200,1.15,201,1.691,202,1.892,203,3.801,204,1.121,205,1.892,206,2.475,207,1.892,208,1.232,209,0.629,210,1.232,211,1.892,212,1.892,213,2.411,214,1.232,215,1.15,216,1.299,217,1.232,218,1.232,219,1.569,220,1.819,221,2.439,222,3.914,223,3.322,224,1.819,225,2.439,226,1.819,227,1.819,228,1.15,229,1.892,230,1.15,231,1.15,232,1.55,233,3.669,234,2.897,235,1.892,236,1.819,237,2.206,238,1.892,239,1.819,240,1.892,241,1.892,242,1.892,243,0.455,244,0.629,245,0.578,246,0.534,247,0.455,248,1.036,249,1.036,250,1.036,251,1.036,252,1.036,253,1.036,254,1.406,255,0.629,256,0.629,257,0.629,258,0.629,259,0.629,260,0.629,261,0.629,262,0.629,263,0.629,264,0.629,265,0.629,266,0.629,267,0.629,268,0.629,269,0.629,270,0.629,271,0.629,272,0.629,273,1.184,274,0.748,275,0.748,276,1.191,277,0.879,278,0.629,279,1.569,280,0.748,281,0.748,282,0.748,283,0.748,284,0.748,285,0.748,286,0.748,287,0.748,288,0.748,289,0.748,290,0.748,291,0.748,292,0.748,293,0.534,294,0.748,295,0.748,296,0.748,297,0.455,298,0.748,299,0.748,300,0.748,301,0.748,302,0.748,303,0.748,304,0.748,305,0.748,306,0.534,307,0.534,308,0.748,309,0.629,310,0.748,311,0.748,312,0.748,313,0.748,314,1.232,315,0.629,316,1.232,317,0.629,318,0.453,319,0.748,320,1.232,321,0.748,322,0.748,323,0.748,324,1.232,325,0.748,326,2.011,327,0.748,328,0.748,329,1.232,330,0.748,331,1.232,332,0.748,333,0.748,334,0.748,335,0.748,336,0.534,337,0.748,338,1.232,339,0.748,340,1.232,341,0.748,342,1.232,343,0.748,344,0.879,345,0.748,346,0.748,347,1.232,348,0.629,349,0.748,350,0.748,351,0.748,352,2.163,353,1.819,354,1.299,355,1.569,356,1.232,357,2.163,358,2.286,359,1.819,360,0.748,361,0.387,362,0.748,363,0.534,364,1.97,365,1.232,366,0.748,367,0.748,368,0.748,369,0.748,370,0.748,371,0.748,372,1.865,373,0.748,374,0.748,375,0.748,376,0.748,377,0.748,378,0.748,379,0.748,380,0.748,381,0.748,382,0.748,383,0.879,384,0.748,385,0.748,386,0.748,387,0.748,388,0.748,389,0.748,390,0.748,391,0.748]],["title/interfaces/DatationFormatOptions.html",[108,0.726,245,0.61]],["body/interfaces/DatationFormatOptions.html",[3,0.395,4,0.607,5,0.327,7,0.555,8,0.065,14,0.82,15,0.063,16,0.038,17,0.038,18,0.02,19,1.389,21,0.766,22,0.47,23,1.378,24,0.997,25,0.997,26,1.21,27,0.766,28,1.154,29,0.265,30,0.719,31,1.337,32,2.228,33,2.14,34,1.639,35,1.639,36,1.378,37,1.639,38,2.228,39,0.607,43,1.31,45,0.849,47,0.766,49,0.766,51,0.652,54,1.378,59,1.072,62,0.902,63,0.977,64,1.072,65,1.072,66,1.99,69,0.594,70,0.555,71,1.072,72,1.072,73,1.072,74,1.221,76,1.412,77,1.441,84,1.072,86,1.072,87,1.03,88,1.072,89,0.47,92,1.17,94,1.072,95,0.93,96,2.028,100,1.421,104,1.11,107,1.072,108,1.11,110,1.673,111,1.21,112,1.072,113,0.849,114,1.652,115,1.03,116,2.028,117,1.072,119,1.421,121,0.766,123,0.766,125,0.902,143,1.243,144,0.652,146,1.46,148,1.072,149,0.652,151,0.997,152,0.652,153,0.766,156,1.072,159,1.072,161,1.072,162,1.072,163,0.902,164,1.639,165,1.639,166,1.072,167,1.072,168,1.072,169,1.072,170,1.072,171,1.072,172,1.639,173,1.072,174,1.072,175,0.902,176,1.072,177,1.072,178,1.072,179,1.072,180,2.228,181,1.072,182,1.378,183,1.072,184,1.072,185,1.072,186,1.072,187,1.639,188,1.072,189,1.072,190,1.17,191,1.072,193,1.072,194,1.714,195,0.902,198,0.766,199,1.355,201,1.673,204,0.766,208,1.072,210,1.072,214,1.072,216,1.421,217,1.072,218,1.072,219,1.072,220,1.639,224,1.639,226,1.639,227,1.639,232,1.652,236,1.639,239,1.639,243,0.652,244,0.902,245,0.733,246,0.766,247,0.652,248,1.673,249,2.019,250,2.019,251,2.019,252,2.019,253,2.019,254,1.535,255,0.902,256,0.902,257,0.902,258,0.902,259,0.902,260,0.902,261,0.902,262,0.902,263,0.902,264,0.902,265,0.902,266,0.902,267,0.902,268,0.902,269,0.902,270,0.902,271,0.902,272,0.902,273,1.363,274,1.072,275,1.072,276,1.301,277,1.17,278,0.902,279,1.99,280,1.072,281,1.072,282,1.072,283,1.072,284,1.072,285,1.072,286,1.072,287,1.072,288,1.072,289,1.072,290,1.072,291,1.072,292,1.072,293,0.766,294,1.072,295,1.072,296,1.072,297,0.652,298,1.072,299,1.072,300,1.072,301,1.072,302,1.072,303,1.072,304,1.072,305,1.072,306,0.766,307,0.766,308,1.072,309,0.902,310,1.072,311,1.072,312,1.072,313,1.072,314,1.639,315,0.902,316,1.639,317,0.902,318,0.603,319,1.072,320,1.639,321,1.072,322,1.072,323,1.072,324,1.639,325,1.072,326,2.4,327,1.072,328,1.072,329,1.639,330,1.072,331,1.639,332,1.072,333,1.072,334,1.072,335,1.072,336,0.766,337,1.072,338,1.639,339,1.072,340,1.639,341,1.072,342,1.639,343,1.072,344,1.17,345,1.072,346,1.072,347,1.639,348,0.902,349,1.072,350,1.072,351,1.072,352,2.531,353,2.228,354,1.591,355,1.99,356,1.639,357,2.531,358,2.633,359,2.228,360,1.072,361,0.555,362,1.072,363,0.766,364,2.14,365,1.639,366,1.072,367,1.072,368,1.072,369,1.072,370,1.072,371,1.072,372,2.062,373,1.072,374,1.072,375,1.072,376,1.072,377,1.072,378,1.072,379,1.072,380,1.072,381,1.072,382,1.072,383,1.17,384,1.072,385,1.072,386,1.072,387,1.072,388,1.072,389,1.072,390,1.072,391,1.072,392,0.902]],["title/interfaces/DatationModel.html",[28,0.857,245,0.61]],["body/interfaces/DatationModel.html",[3,0.388,4,0.6,5,0.321,7,0.546,8,0.065,14,0.813,15,0.062,16,0.037,17,0.037,18,0.02,19,1.386,21,0.753,22,0.462,23,1.656,24,1.198,25,1.198,26,1.343,27,0.753,28,1.233,29,0.261,30,0.71,31,1.333,32,2.618,33,2.187,34,2.382,35,2.382,36,2.003,37,2.382,38,2.618,39,0.766,43,1.302,45,0.838,47,0.753,49,0.753,51,0.641,54,1.361,59,1.054,62,0.887,63,0.968,64,1.054,65,1.054,66,1.969,69,0.668,70,0.546,71,1.054,72,1.054,73,1.054,74,1.322,76,1.368,77,1.586,84,1.054,86,1.054,87,1.019,88,1.054,89,0.462,92,1.155,94,1.054,95,0.927,96,2.019,100,1.406,104,1.103,107,1.054,108,1.045,110,1.656,111,1.198,112,1.054,113,0.838,114,1.592,115,1.019,116,2.019,117,1.054,119,1.406,121,0.753,123,0.753,125,0.887,143,1.233,144,0.641,146,1.449,148,1.054,149,0.641,151,0.984,152,0.641,153,0.753,156,1.054,159,1.054,161,1.054,162,1.054,163,0.887,164,1.618,165,1.618,166,1.054,167,1.054,168,1.054,169,1.054,170,1.054,171,1.054,172,1.618,173,1.054,174,1.054,175,0.887,176,1.054,177,1.054,178,1.054,179,1.054,180,2.208,181,1.054,182,1.361,183,1.054,184,1.054,185,1.054,186,1.054,187,1.618,188,1.054,189,1.054,190,1.406,191,1.054,193,1.054,194,1.701,195,0.887,198,0.753,199,1.343,201,1.656,204,0.753,208,1.054,210,1.054,214,1.054,216,1.406,217,1.054,218,1.054,219,1.054,220,1.618,224,1.618,226,1.618,227,1.618,232,1.643,236,1.618,239,1.618,243,0.641,244,0.887,245,0.813,246,1.155,247,0.984,248,1.361,249,1.361,250,1.361,251,1.361,252,1.361,253,1.361,254,1.53,255,0.887,256,0.887,257,0.887,258,0.887,259,0.887,260,0.887,261,0.887,262,0.887,263,0.887,264,0.887,265,0.887,266,0.887,267,0.887,268,0.887,269,0.887,270,0.887,271,0.887,272,0.887,273,1.355,274,1.054,275,1.054,276,1.296,277,1.155,278,0.887,279,1.969,280,1.054,281,1.054,282,1.054,283,1.054,284,1.054,285,1.054,286,1.054,287,1.054,288,1.054,289,1.054,290,1.054,291,1.054,292,1.054,293,0.753,294,1.054,295,1.054,296,1.054,297,0.641,298,1.054,299,1.054,300,1.054,301,1.054,302,1.054,303,1.054,304,1.054,305,1.054,306,0.753,307,0.753,308,1.054,309,0.887,310,1.054,311,1.054,312,1.054,313,1.054,314,1.618,315,0.887,316,1.618,317,0.887,318,0.596,319,1.054,320,1.618,321,1.054,322,1.054,323,1.054,324,1.618,325,1.054,326,2.382,327,1.054,328,1.054,329,1.618,330,1.054,331,1.618,332,1.054,333,1.054,334,1.054,335,1.054,336,0.753,337,1.054,338,1.618,339,1.054,340,1.618,341,1.054,342,1.618,343,1.054,344,1.155,345,1.054,346,1.054,347,1.618,348,0.887,349,1.054,350,1.054,351,1.054,352,2.514,353,2.208,354,1.577,355,1.969,356,1.618,357,2.514,358,2.618,359,2.208,360,1.054,361,0.546,362,1.054,363,0.753,364,2.133,365,1.618,366,1.054,367,1.054,368,1.054,369,1.054,370,1.054,371,1.054,372,2.054,373,1.054,374,1.054,375,1.054,376,1.054,377,1.054,378,1.054,379,1.054,380,1.054,381,1.054,382,1.054,383,1.155,384,1.054,385,1.054,386,1.054,387,1.054,388,1.054,389,1.054,390,1.054,391,1.054,392,0.887]],["title/classes/HistoricalDate.html",[15,0.097,393,1.392]],["body/classes/HistoricalDate.html",[3,0.371,4,0.307,5,0.307,7,0.522,8,0.065,14,0.705,15,0.059,16,0.019,17,0.03,18,0.019,19,1.406,20,0.613,22,1.023,23,1.314,24,1.567,25,1.502,26,1.884,27,1.116,28,0.991,29,0.249,30,0.685,31,1.448,33,0.72,36,1.61,39,0.919,40,1.314,43,0.991,45,0.991,47,1.54,49,1.54,51,1.312,57,1.563,58,1.008,60,2.199,63,1.199,67,1.901,68,1.901,69,0.714,70,1.378,74,1.225,76,1.247,77,1.116,87,1.208,89,1.333,90,1.914,92,1.951,93,1.222,95,0.753,96,2.089,98,1.914,100,1.763,101,1.222,104,1.023,106,1.222,108,1.13,111,0.613,113,1.116,114,1.884,115,1.208,116,1.54,119,0.72,121,1.116,123,1.54,125,0.848,143,1.278,144,1.164,146,1.567,149,0.951,151,0.951,152,0.951,153,1.54,190,1.54,194,1.763,196,1.563,198,0.72,199,0.951,206,1.008,209,1.314,221,1.222,225,1.222,232,0.613,245,0.575,246,0.72,247,0.613,254,1.532,273,1.208,276,1.351,293,0.72,297,0.613,306,0.72,307,0.72,318,0.575,336,0.72,344,0.72,348,0.848,361,0.522,363,1.116,364,1.54,372,1.367,383,1.116,393,1.962,394,2.212,395,0.72,396,1.895,397,1.895,398,2.076,399,2.83,400,2.4,401,2.615,402,2.615,403,2.615,404,2.615,405,2.94,406,2.4,407,2.4,408,2.4,409,2.4,410,2.994,411,1.895,412,2.4,413,1.548,414,1.895,415,1.548,416,2.321,417,1.895,418,1.548,419,1.914,420,1.548,421,1.548,422,1.548,423,1.548,424,1.548,425,2.076,426,1.895,427,1.548,428,1.548,429,1.548,430,1.895,431,1.548,432,1.895,433,1.548,434,1.895,435,1.548,436,1.548,437,1.563,438,1.563,439,1.563,440,1.548,441,1.548,442,1.548,443,1.548,444,2.4,445,1.895,446,1.548,447,2.615,448,2.4,449,1.548,450,1.548,451,2.4,452,1.548,453,2.321,454,2.321,455,1.548,456,1.548,457,1.548,458,1.548,459,1.222,460,1.548,461,1.548,462,1.895,463,1.895,464,1.895,465,1.895,466,1.61,467,1.008,468,3.228,469,1.222,470,3.387,471,1.222,472,1.222,473,1.222,474,2.615,475,1.222,476,1.895,477,1.895,478,1.222,479,1.895,480,1.222,481,1.222,482,1.222,483,2.321,484,1.222,485,1.222,486,1.222,487,1.222,488,1.895,489,1.222,490,1.222,491,1.222,492,2.321,493,1.222,494,1.222,495,1.222,496,1.222,497,1.222,498,1.895,499,1.222,500,1.895,501,1.222,502,1.222,503,1.895,504,1.222,505,2.321,506,1.222,507,1.895,508,1.222,509,1.222,510,1.222,511,1.222,512,1.222,513,1.222,514,2.994,515,2.994,516,2.321,517,1.895,518,2.615,519,2.615,520,2.615,521,1.222,522,1.222,523,1.222,524,2.321,525,2.615,526,2.321,527,2.321,528,1.222,529,1.222,530,1.895,531,1.222,532,1.008,533,1.222,534,1.222,535,1.222,536,1.222,537,1.895,538,1.008]],["title/interfaces/HistoricalDateModel.html",[245,0.61,398,1.392]],["body/interfaces/HistoricalDateModel.html",[3,0.48,4,0.397,5,0.397,7,0.675,8,0.065,14,0.823,15,0.076,16,0.025,17,0.036,18,0.025,19,1.372,22,0.571,24,1.586,25,1.586,26,1.857,27,0.93,28,1.454,29,0.322,30,0.831,31,1.363,33,0.93,39,0.681,43,0.675,45,0.675,47,0.93,49,0.93,51,0.793,63,1.286,69,0.607,74,1.076,76,1.143,77,0.675,87,1.157,89,0.571,92,1.861,95,0.795,96,2.18,98,1.303,100,0.93,104,1.076,108,0.98,111,0.793,113,0.675,114,1.89,115,1.157,116,1.354,119,0.93,121,0.93,123,1.595,143,0.675,144,1.153,146,1.493,149,0.793,151,0.793,152,0.793,153,1.354,190,1.354,194,1.942,196,1.303,199,0.793,206,1.303,209,1.594,232,0.793,245,0.823,246,1.354,247,1.153,254,1.609,273,1.35,276,1.402,293,0.93,297,0.793,306,0.93,307,0.93,318,0.48,336,0.93,344,0.93,361,0.675,363,1.354,364,1.752,372,1.595,383,1.354,392,1.096,393,1.879,394,0.93,395,0.93,396,1.58,397,1.58,398,2.063,399,3.3,401,1.58,402,1.58,403,1.58,404,1.58,410,2.299,411,1.58,414,1.58,416,1.58,417,1.58,419,1.896,425,1.594,430,1.58,432,1.58,434,1.58,437,1.303,438,1.303,439,1.303,447,2.299,453,2.299,454,2.299,462,1.58,463,1.58,464,1.58,465,1.58,466,1.879,467,1.303,468,3.489,469,1.58,470,3.614,471,1.58,472,1.58,473,1.58,474,2.976,475,1.58,476,2.299,477,2.299,478,1.58,479,2.299,480,1.58,481,1.58,482,1.58,483,2.71,484,1.58,485,1.58,486,1.58,487,1.58,488,2.299,489,1.58,490,1.58,491,1.58,492,2.71,493,1.58,494,1.58,495,1.58,496,1.58,497,1.58,498,2.299,499,1.58,500,2.299,501,1.58,502,1.58,503,2.299,504,1.58,505,2.71,506,1.58,507,2.299,508,1.58,509,1.58,510,1.58,511,1.58,512,1.58,513,1.58,514,3.3,515,3.3,516,2.71,517,2.299,518,2.976,519,2.976,520,2.976,521,1.58,522,1.58,523,1.58,524,2.71,525,2.976,526,2.71,527,2.71,528,1.58,529,1.58,530,2.299,531,1.58,532,1.303,533,1.58,534,1.58,535,1.58,536,1.58,537,2.299,538,1.303]],["title/classes/MspOperation.html",[15,0.097,539,1.656]],["body/classes/MspOperation.html",[3,0.798,4,0.661,5,0.661,8,0.064,14,0.983,15,0.127,16,0.041,17,0.05,18,0.041,20,1.319,22,0.951,29,0.536,30,1.171,31,1.171,39,0.814,45,1.731,60,2.286,67,1.548,68,1.548,69,0.781,70,1.123,76,1.452,89,0.951,90,2.168,95,0.661,276,0.951,277,1.548,467,2.168,539,2.671,540,3.233,541,2.168,542,3.239,543,4.103,544,4.446,545,4.446,546,4.446,547,4.446,548,4.446,549,4.103,550,4.446,551,3.331,552,3.511,553,3.331,554,3.331,555,3.331,556,3.331,557,3.331,558,3.331,559,3.331,560,3.331,561,2.63,562,2.63,563,2.63,564,2.63,565,4.103,566,2.63,567,3.331,568,3.331,569,3.331]],["title/classes/RomanNumber.html",[15,0.097,243,1.007]],["body/classes/RomanNumber.html",[3,0.451,4,0.374,5,0.374,7,0.635,8,0.065,14,0.451,15,0.072,16,0.041,17,0.034,18,0.023,20,0.746,22,0.946,29,0.533,30,0.795,31,0.795,39,0.987,40,1.524,43,1.719,45,1.705,60,2.175,67,1.901,68,1.901,69,0.753,70,1.378,74,1.359,76,1.407,77,1.378,87,1.234,89,1.168,95,0.812,102,2.383,104,1.24,113,1.495,135,2.198,143,1.591,198,1.701,201,2.004,204,2.019,209,2.004,216,1.701,232,1.103,243,1.103,244,2.536,254,0.938,273,1.378,276,1.24,309,1.524,318,0.877,354,1.294,361,1.234,445,3.229,538,1.813,570,3.728,571,1.487,572,2.784,573,3.313,574,3.313,575,3.313,576,3.313,577,3.313,578,3.313,579,3.313,580,2.784,581,2.784,582,2.784,583,2.784,584,2.784,585,3.313,586,3.66,587,3.66,588,1.883,589,2.784,590,2.784,591,2.784,592,2.784,593,2.784,594,2.784,595,4.231,596,3.66,597,3.66,598,1.883,599,3.66,600,3.66,601,3.66,602,3.66,603,4.089,604,1.883,605,2.784,606,2.784,607,2.784,608,2.784,609,2.784,610,2.784,611,2.784,612,2.784,613,2.784,614,2.784,615,2.784,616,1.883,617,2.784,618,1.883,619,2.784,620,1.883,621,1.883,622,2.784,623,4.436,624,1.883,625,3.66,626,4.089,627,4.089,628,3.66,629,4.344,630,2.784,631,1.883,632,1.883,633,2.784,634,3.313,635,1.883,636,1.883,637,2.784,638,1.883,639,2.784,640,1.883,641,1.883,642,3.906,643,4.231,644,1.883,645,2.784,646,2.784,647,2.784,648,2.198,649,3.66,650,2.784,651,3.313,652,3.66,653,2.784,654,1.883,655,1.883,656,2.784,657,1.883,658,2.784,659,1.883,660,1.883,661,1.883,662,1.883,663,1.883,664,1.883,665,1.883,666,1.883,667,1.883,668,1.883,669,1.883,670,1.883,671,1.883,672,2.784,673,1.883,674,1.883,675,2.784,676,1.883,677,1.883,678,1.883,679,1.883,680,1.883,681,1.883,682,1.883,683,1.883]],["title/classes/TextRange.html",[15,0.097,684,1.656]],["body/classes/TextRange.html",[3,0.661,4,0.548,5,0.548,8,0.065,14,0.661,15,0.105,16,0.034,17,0.045,18,0.034,20,1.093,22,1.162,29,0.697,30,1.039,31,1.435,39,0.859,40,1.992,43,1.372,51,1.714,57,2.818,58,1.796,60,2.19,63,1.236,67,1.892,68,1.892,69,0.724,70,1.372,74,1.405,76,1.284,77,1.226,87,1.226,89,1.284,95,0.722,104,1.284,126,2.818,143,1.226,146,1.973,149,1.441,151,1.441,152,1.093,175,1.51,182,1.51,216,1.691,234,2.873,237,2.178,254,0.93,273,1.226,276,1.236,278,2.229,315,1.51,317,1.51,318,0.872,354,1.282,425,2.741,438,2.369,439,2.369,684,3.113,685,3.776,686,2.178,687,3.856,688,4.071,689,4.922,690,2.759,691,2.759,692,3.638,693,3.638,694,2.759,695,2.759,696,2.759,697,2.759,698,2.759,699,3.638,700,2.759,701,2.759,702,3.638,703,3.638,704,2.759,705,3.638,706,3.638,707,2.759,708,2.759,709,2.759,710,2.759,711,2.759,712,2.759,713,2.759,714,2.759,715,2.759,716,2.759,717,3.638,718,2.759,719,2.759,720,2.759]],["title/coverage.html",[721,2.721]],["body/coverage.html",[5,0.723,8,0.063,15,0.186,16,0.045,17,0.053,18,0.045,19,1.04,21,2.223,28,1.228,63,1.04,69,0.586,95,0.723,108,1.04,115,1.228,243,1.443,245,1.108,361,1.228,393,1.994,394,2.149,395,2.149,398,1.994,466,1.994,539,2.371,540,2.371,541,2.371,570,2.876,571,2.876,684,2.371,685,2.876,686,2.876,721,2.876,722,2.876,723,3.643,724,3.643,725,3.643,726,3.643,727,4.331,728,4.331,729,3.643,730,3.643,731,4.331,732,3.643,733,3.643,734,3.643,735,3.643,736,3.643,737,3.643,738,3.643,739,3.643,740,3.643,741,3.643,742,3.643,743,3.643]],["title/dependencies.html",[744,2.136,745,1.671]],["body/dependencies.html",[8,0.064,10,2.998,12,2.998,16,0.047,17,0.055,18,0.047,745,2.079,746,3.797,747,5.083,748,3.797,749,3.797,750,4.439,751,4.439,752,3.797,753,3.797,754,2.998,755,3.797,756,3.797,757,3.797,758,3.797,759,3.797,760,3.797,761,3.797,762,3.797,763,3.797,764,3.797,765,3.797,766,3.797]],["title/miscellaneous/enumerations.html",[767,1.17,768,2.41]],["body/miscellaneous/enumerations.html",[8,0.06,16,0.047,17,0.055,18,0.047,24,1.528,25,1.528,26,1.528,29,0.621,39,0.889,69,0.721,95,0.889,144,1.528,277,1.794,394,1.794,395,2.083,419,2.917,425,2.113,540,2.512,541,2.917,542,3.047,552,3.538,561,3.047,562,3.047,563,3.047,564,3.047,767,2.113,768,3.047,769,3.047,770,3.859,771,3.859]],["title/index.html",[29,0.344,772,2.136,773,2.136]],["body/index.html",[4,0.593,8,0.052,16,0.037,17,0.047,18,0.037,62,1.635,63,0.853,126,3.073,136,3.025,163,1.635,195,1.635,199,1.675,247,1.517,318,0.716,426,2.358,437,3.073,459,3.839,532,1.944,566,2.358,648,3.34,687,2.358,722,3.34,745,1.635,754,2.358,774,2.987,775,3.831,776,2.987,777,3.831,778,4.951,779,2.987,780,2.987,781,3.831,782,3.831,783,2.987,784,2.987,785,2.987,786,2.987,787,2.987,788,2.987,789,2.987,790,2.987,791,2.987,792,4.23,793,4.462,794,2.987,795,2.987,796,4.462,797,2.987,798,3.831,799,2.987,800,4.614,801,2.987,802,4.614,803,2.987,804,4.462,805,2.987,806,3.831,807,3.831,808,2.987,809,2.987,810,5.036,811,2.987,812,2.987,813,2.987,814,2.987,815,2.987,816,2.987,817,2.987,818,2.987,819,2.987,820,2.987,821,2.987,822,2.987,823,4.8,824,3.831,825,4.951,826,2.987,827,4.8,828,2.987,829,3.831,830,2.987,831,2.987,832,2.987,833,2.987,834,2.987,835,2.987,836,2.987,837,2.987,838,2.987,839,2.987,840,2.987,841,4.23,842,2.987,843,2.987,844,4.23,845,2.987,846,2.987,847,2.987,848,2.987,849,2.987,850,2.987,851,2.987,852,3.831,853,4.23,854,4.721,855,4.462,856,3.831,857,2.987,858,2.987,859,3.831,860,2.987,861,2.987,862,2.987,863,2.987,864,2.987,865,2.358,866,2.987,867,2.987,868,2.987,869,2.987,870,2.987,871,2.987,872,2.987]],["title/modules.html",[2,2.243]],["body/modules.html",[1,2.629,2,2.629,8,0.057,16,0.05,17,0.057,18,0.05,865,3.189,873,4.038,874,4.038]],["title/overview.html",[875,2.721]],["body/overview.html",[0,3.59,8,0.056,16,0.049,17,0.056,18,0.049,20,1.568,54,2.167,102,2.577,104,1.13,297,1.568,392,2.167,745,2.167,875,3.126,876,3.959,877,3.959,878,3.959,879,3.959,880,3.959,881,4.547,882,3.959]],["title/miscellaneous/variables.html",[767,1.17,883,2.41]],["body/miscellaneous/variables.html",[8,0.063,16,0.046,17,0.054,18,0.046,19,1.059,21,1.725,29,0.597,39,0.869,69,0.705,74,1.059,108,1.059,110,2.031,111,1.469,113,1.57,114,1.469,115,1.476,204,1.725,248,2.031,249,2.031,250,2.031,251,2.031,252,2.031,253,2.031,255,2.031,256,2.031,257,2.031,258,2.031,259,2.031,260,2.031,261,2.031,262,2.031,263,2.031,264,2.031,265,2.031,266,2.031,267,2.031,268,2.031,269,2.031,270,2.031,271,2.031,272,2.031,318,0.889,394,1.725,395,2.035,466,2.397,767,2.031,769,2.93,883,2.93,884,3.71]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":95,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["0.9.1",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["0123]\\\\d?)\\\\s",{"_index":296,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["1",{"_index":104,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"overview.html":{}}}],["1.0.4",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":318,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":361,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"coverage.html":{}}}],["1000",{"_index":595,"title":{},"body":{"classes/RomanNumber.html":{}}}],["10000",{"_index":593,"title":{},"body":{"classes/RomanNumber.html":{}}}],["100000",{"_index":591,"title":{},"body":{"classes/RomanNumber.html":{}}}],["1000000",{"_index":589,"title":{},"body":{"classes/RomanNumber.html":{}}}],["11",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["11/20",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["13/25",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["1].touppercase",{"_index":676,"title":{},"body":{"classes/RomanNumber.html":{}}}],["1]=start",{"_index":708,"title":{},"body":{"classes/TextRange.html":{}}}],["1st",{"_index":483,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["2",{"_index":123,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["2.5.4",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["2]=length",{"_index":709,"title":{},"body":{"classes/TextRange.html":{}}}],["2nd",{"_index":492,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["3",{"_index":297,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"overview.html":{}}}],["3/14",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":105,"title":{},"body":{"classes/Datation.html":{}}}],["33",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["350",{"_index":444,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["4",{"_index":615,"title":{},"body":{"classes/RomanNumber.html":{}}}],["4,5",{"_index":301,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["40",{"_index":614,"title":{},"body":{"classes/RomanNumber.html":{}}}],["400",{"_index":612,"title":{},"body":{"classes/RomanNumber.html":{}}}],["4000",{"_index":610,"title":{},"body":{"classes/RomanNumber.html":{}}}],["40000",{"_index":608,"title":{},"body":{"classes/RomanNumber.html":{}}}],["400000",{"_index":606,"title":{},"body":{"classes/RomanNumber.html":{}}}],["480",{"_index":103,"title":{},"body":{"classes/Datation.html":{}}}],["5",{"_index":102,"title":{},"body":{"classes/Datation.html":{},"classes/RomanNumber.html":{},"overview.html":{}}}],["50",{"_index":597,"title":{},"body":{"classes/RomanNumber.html":{}}}],["500",{"_index":596,"title":{},"body":{"classes/RomanNumber.html":{}}}],["5000",{"_index":594,"title":{},"body":{"classes/RomanNumber.html":{}}}],["50000",{"_index":592,"title":{},"body":{"classes/RomanNumber.html":{}}}],["500000",{"_index":590,"title":{},"body":{"classes/RomanNumber.html":{}}}],["52",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":133,"title":{},"body":{"classes/Datation.html":{}}}],["56/7",{"_index":132,"title":{},"body":{"classes/Datation.html":{}}}],["57",{"_index":139,"title":{},"body":{"classes/Datation.html":{}}}],["6",{"_index":303,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["6.4.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":305,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["7/8",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["775",{"_index":138,"title":{},"body":{"classes/Datation.html":{}}}],["776",{"_index":131,"title":{},"body":{"classes/Datation.html":{}}}],["776/5",{"_index":130,"title":{},"body":{"classes/Datation.html":{}}}],["8",{"_index":308,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["8.2.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["87",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":309,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{}}}],["90",{"_index":613,"title":{},"body":{"classes/RomanNumber.html":{}}}],["900",{"_index":611,"title":{},"body":{"classes/RomanNumber.html":{}}}],["9000",{"_index":609,"title":{},"body":{"classes/RomanNumber.html":{}}}],["90000",{"_index":607,"title":{},"body":{"classes/RomanNumber.html":{}}}],["900000",{"_index":605,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_note",{"_index":544,"title":{},"body":{"classes/MspOperation.html":{}}}],["_operator",{"_index":545,"title":{},"body":{"classes/MspOperation.html":{}}}],["_postalpha",{"_index":573,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_postval",{"_index":574,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_prealpha",{"_index":575,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_preval",{"_index":576,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_romandigits",{"_index":577,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_romansubdigits",{"_index":578,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_romanvalues",{"_index":579,"title":{},"body":{"classes/RomanNumber.html":{}}}],["_tag",{"_index":546,"title":{},"body":{"classes/MspOperation.html":{}}}],["_valuea",{"_index":547,"title":{},"body":{"classes/MspOperation.html":{}}}],["_valueb",{"_index":548,"title":{},"body":{"classes/MspOperation.html":{}}}],["a.d",{"_index":106,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{}}}],["abouttext",{"_index":249,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["above",{"_index":136,"title":{},"body":{"classes/Datation.html":{},"index.html":{}}}],["accessors",{"_index":549,"title":{},"body":{"classes/MspOperation.html":{}}}],["ad",{"_index":111,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":459,"title":{},"body":{"classes/HistoricalDate.html":{},"index.html":{}}}],["adding",{"_index":791,"title":{},"body":{"index.html":{}}}],["adtext",{"_index":251,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["affected",{"_index":859,"title":{},"body":{"index.html":{}}}],["affected:e2e",{"_index":862,"title":{},"body":{"index.html":{}}}],["affected:test",{"_index":858,"title":{},"body":{"index.html":{}}}],["allow",{"_index":626,"title":{},"body":{"classes/RomanNumber.html":{}}}],["allowbar",{"_index":623,"title":{},"body":{"classes/RomanNumber.html":{}}}],["allowprefix",{"_index":642,"title":{},"body":{"classes/RomanNumber.html":{}}}],["always",{"_index":127,"title":{},"body":{"classes/Datation.html":{}}}],["ancient",{"_index":643,"title":{},"body":{"classes/RomanNumber.html":{}}}],["angular",{"_index":809,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":12,"title":{},"body":{"modules/CoreModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":10,"title":{},"body":{"modules/CoreModule.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["ante",{"_index":221,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{}}}],["app",{"_index":827,"title":{},"body":{"index.html":{}}}],["appended",{"_index":230,"title":{},"body":{"classes/Datation.html":{}}}],["application",{"_index":824,"title":{},"body":{"index.html":{}}}],["applications",{"_index":800,"title":{},"body":{"index.html":{}}}],["approx_delta",{"_index":466,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["approximate",{"_index":416,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["apr",{"_index":265,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["artifacts",{"_index":846,"title":{},"body":{"index.html":{}}}],["assumed",{"_index":497,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["aug",{"_index":268,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["automatically",{"_index":839,"title":{},"body":{"index.html":{}}}],["av",{"_index":524,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["available",{"_index":873,"title":{},"body":{"modules.html":{}}}],["awdwmmmwvweawpwh",{"_index":240,"title":{},"body":{"classes/Datation.html":{}}}],["awdwmmmwvwepwpwh",{"_index":238,"title":{},"body":{"classes/Datation.html":{}}}],["awdwmmmwvwewpwh",{"_index":235,"title":{},"body":{"classes/Datation.html":{}}}],["awdwmmmwvwpwh",{"_index":242,"title":{},"body":{"classes/Datation.html":{}}}],["b",{"_index":399,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["b.c",{"_index":98,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["bar",{"_index":627,"title":{},"body":{"classes/RomanNumber.html":{}}}],["based",{"_index":99,"title":{},"body":{"classes/Datation.html":{}}}],["bc",{"_index":110,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["bc/ad",{"_index":481,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["bcad",{"_index":293,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["bcad[0",{"_index":306,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["bcad[1",{"_index":307,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["bctext",{"_index":250,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["beginning",{"_index":129,"title":{},"body":{"classes/Datation.html":{}}}],["belong",{"_index":531,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["below",{"_index":808,"title":{},"body":{"index.html":{}}}],["between",{"_index":457,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["bitwise",{"_index":682,"title":{},"body":{"classes/RomanNumber.html":{}}}],["boolean",{"_index":77,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["bootstrap",{"_index":878,"title":{},"body":{"overview.html":{}}}],["both",{"_index":454,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["boundaries",{"_index":455,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["boundary",{"_index":446,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["braces",{"_index":172,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["break",{"_index":372,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["browse",{"_index":874,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":437,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"index.html":{}}}],["bv",{"_index":526,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["c",{"_index":204,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{},"miscellaneous/variables.html":{}}}],["c.tolowercase",{"_index":664,"title":{},"body":{"classes/RomanNumber.html":{}}}],["c.touppercase",{"_index":665,"title":{},"body":{"classes/RomanNumber.html":{}}}],["c1",{"_index":636,"title":{},"body":{"classes/RomanNumber.html":{}}}],["c2",{"_index":634,"title":{},"body":{"classes/RomanNumber.html":{}}}],["c\\\\.)?\\\\s",{"_index":295,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["cadmus",{"_index":774,"title":{},"body":{"index.html":{}}}],["cadmus/mylib",{"_index":834,"title":{},"body":{"index.html":{}}}],["capabilities",{"_index":792,"title":{},"body":{"index.html":{}}}],["case",{"_index":364,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["cd",{"_index":600,"title":{},"body":{"classes/RomanNumber.html":{}}}],["central",{"_index":443,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["centuries",{"_index":442,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["century",{"_index":92,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["centurytoyear",{"_index":400,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["centurytoyear(century",{"_index":414,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["change",{"_index":841,"title":{},"body":{"index.html":{}}}],["char",{"_index":231,"title":{},"body":{"classes/Datation.html":{}}}],["character",{"_index":688,"title":{},"body":{"classes/TextRange.html":{}}}],["characters",{"_index":278,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/TextRange.html":{}}}],["christum",{"_index":222,"title":{},"body":{"classes/Datation.html":{}}}],["class",{"_index":15,"title":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{}}}],["classes",{"_index":20,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"overview.html":{}}}],["cm",{"_index":599,"title":{},"body":{"classes/RomanNumber.html":{}}}],["code",{"_index":195,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"index.html":{}}}],["commonmodule",{"_index":11,"title":{},"body":{"modules/CoreModule.html":{}}}],["component",{"_index":844,"title":{},"body":{"index.html":{}}}],["const",{"_index":254,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["constructor",{"_index":58,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/TextRange.html":{}}}],["constructor(datation",{"_index":59,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["constructor(date",{"_index":411,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["constructor(start",{"_index":693,"title":{},"body":{"classes/TextRange.html":{}}}],["convert",{"_index":198,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"classes/RomanNumber.html":{}}}],["converter",{"_index":572,"title":{},"body":{"classes/RomanNumber.html":{}}}],["copied",{"_index":71,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["copy",{"_index":86,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["copyfrom",{"_index":41,"title":{},"body":{"classes/Datation.html":{}}}],["copyfrom(datation",{"_index":84,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["core",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["coremodule",{"_index":1,"title":{"modules/CoreModule.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["corresponding",{"_index":93,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{}}}],["coverage",{"_index":721,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":62,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"index.html":{}}}],["created",{"_index":73,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["cypress",{"_index":861,"title":{},"body":{"index.html":{}}}],["d",{"_index":209,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{}}}],["d+)(?:\\\\s*/\\\\s*(\\\\d",{"_index":302,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["d.isundefined",{"_index":512,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["dashes",{"_index":174,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["data",{"_index":66,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datatation",{"_index":88,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation",{"_index":19,"title":{"classes/Datation.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datation's",{"_index":162,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation(date.a",{"_index":469,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["datation(date.b",{"_index":471,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["datation(value",{"_index":516,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["datation.day",{"_index":316,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.geterasoptionsforregex(options",{"_index":485,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["datation.hint",{"_index":340,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.isapproximate",{"_index":314,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.iscentury",{"_index":331,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.isdubious",{"_index":338,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.isspan",{"_index":329,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.month",{"_index":324,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.parse(s1",{"_index":511,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["datation.sanitizehint(m[9",{"_index":341,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation.value",{"_index":326,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datation_format_options",{"_index":115,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datationformatoptions",{"_index":108,"title":{"interfaces/DatationFormatOptions.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datationmodel",{"_index":28,"title":{"interfaces/DatationModel.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{}}}],["datationregex",{"_index":310,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datationregex.exec(text",{"_index":312,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["datations",{"_index":178,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["date",{"_index":26,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/enumerations.html":{}}}],["date(this.value",{"_index":374,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["date.getday",{"_index":376,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["date.setendpoint(datation.parse(s2",{"_index":510,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["date.setsinglepoint(d",{"_index":513,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["date.setstartpoint(datation.parse(s1",{"_index":509,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["date.ts",{"_index":395,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["date.ts:102",{"_index":423,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:106",{"_index":435,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:114",{"_index":420,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:118",{"_index":431,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:122",{"_index":421,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:126",{"_index":433,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:135",{"_index":428,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:143",{"_index":418,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:154",{"_index":461,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:173",{"_index":422,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:197",{"_index":436,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:234",{"_index":415,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:248",{"_index":441,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:26",{"_index":413,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:27",{"_index":412,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:285",{"_index":424,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:309",{"_index":427,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["date.ts:43",{"_index":429,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["dates",{"_index":472,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["dates.length",{"_index":477,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["dates[0].trim",{"_index":475,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["dates[1].trim",{"_index":478,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["day",{"_index":32,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["daynames",{"_index":252,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":210,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["ddd",{"_index":214,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["dec",{"_index":272,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":877,"title":{},"body":{"overview.html":{}}}],["default",{"_index":113,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":60,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["delete",{"_index":561,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["delta",{"_index":452,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["dep",{"_index":864,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":745,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":22,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["dev",{"_index":781,"title":{},"body":{"index.html":{}}}],["developing",{"_index":797,"title":{},"body":{"index.html":{}}}],["development",{"_index":835,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":805,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":867,"title":{},"body":{"index.html":{}}}],["diff",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["different",{"_index":798,"title":{},"body":{"index.html":{}}}],["digit",{"_index":632,"title":{},"body":{"classes/RomanNumber.html":{}}}],["digits",{"_index":211,"title":{},"body":{"classes/Datation.html":{}}}],["directory",{"_index":849,"title":{},"body":{"index.html":{}}}],["dist",{"_index":848,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":722,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["double",{"_index":173,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["dow",{"_index":375,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["dubious",{"_index":336,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["dynamic",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":219,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["e.g",{"_index":101,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{}}}],["e2e",{"_index":860,"title":{},"body":{"index.html":{}}}],["ea",{"_index":220,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["em",{"_index":169,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["empty",{"_index":188,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["end",{"_index":126,"title":{},"body":{"classes/Datation.html":{},"classes/TextRange.html":{},"index.html":{}}}],["ensure",{"_index":517,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["enum",{"_index":467,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{}}}],["enumerations",{"_index":768,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["ep",{"_index":224,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["epigraphical",{"_index":650,"title":{},"body":{"classes/RomanNumber.html":{}}}],["equal",{"_index":234,"title":{},"body":{"classes/Datation.html":{},"classes/TextRange.html":{}}}],["era",{"_index":194,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["error",{"_index":462,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["error('no",{"_index":707,"title":{},"body":{"classes/TextRange.html":{}}}],["error(`invalid",{"_index":712,"title":{},"body":{"classes/TextRange.html":{}}}],["escape",{"_index":286,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["etc",{"_index":803,"title":{},"body":{"index.html":{}}}],["execute",{"_index":855,"title":{},"body":{"index.html":{}}}],["export",{"_index":14,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["exports",{"_index":880,"title":{},"body":{"overview.html":{}}}],["express",{"_index":819,"title":{},"body":{"index.html":{}}}],["expressed",{"_index":237,"title":{},"body":{"classes/Datation.html":{},"classes/TextRange.html":{}}}],["extensible",{"_index":780,"title":{},"body":{"index.html":{}}}],["false",{"_index":354,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["features",{"_index":788,"title":{},"body":{"index.html":{}}}],["feb",{"_index":263,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{}}}],["files",{"_index":842,"title":{},"body":{"index.html":{}}}],["flag",{"_index":426,"title":{},"body":{"classes/HistoricalDate.html":{},"index.html":{}}}],["flatten",{"_index":281,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["flattened",{"_index":181,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["following",{"_index":200,"title":{},"body":{"classes/Datation.html":{}}}],["form",{"_index":702,"title":{},"body":{"classes/TextRange.html":{}}}],["format",{"_index":116,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["format.replace('g",{"_index":347,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["format.replace(new",{"_index":342,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["formatter",{"_index":153,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["formatting",{"_index":248,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":814,"title":{},"body":{"index.html":{}}}],["fri",{"_index":260,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["fromroman",{"_index":580,"title":{},"body":{"classes/RomanNumber.html":{}}}],["fromroman(roman",{"_index":622,"title":{},"body":{"classes/RomanNumber.html":{}}}],["frontends",{"_index":815,"title":{},"body":{"index.html":{}}}],["function",{"_index":94,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["further",{"_index":868,"title":{},"body":{"index.html":{}}}],["g",{"_index":199,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"index.html":{}}}],["g/g",{"_index":345,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["ga",{"_index":236,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["generate",{"_index":823,"title":{},"body":{"index.html":{}}}],["generated",{"_index":776,"title":{},"body":{"index.html":{}}}],["generating",{"_index":801,"title":{},"body":{"index.html":{}}}],["generic",{"_index":233,"title":{},"body":{"classes/Datation.html":{}}}],["getcentury",{"_index":42,"title":{},"body":{"classes/Datation.html":{}}}],["getdatetype",{"_index":401,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["getendpoint",{"_index":402,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["geterasoptionsforregex",{"_index":44,"title":{},"body":{"classes/Datation.html":{}}}],["geterasoptionsforregex(options",{"_index":107,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["getparserregex",{"_index":46,"title":{},"body":{"classes/Datation.html":{}}}],["getparserregex(options",{"_index":117,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["getromandigitvalue",{"_index":581,"title":{},"body":{"classes/RomanNumber.html":{}}}],["getromandigitvalue(digit",{"_index":630,"title":{},"body":{"classes/RomanNumber.html":{}}}],["gets",{"_index":166,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["getsinglepoint",{"_index":403,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["getsortvalue",{"_index":47,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["getspanend",{"_index":48,"title":{},"body":{"classes/Datation.html":{}}}],["getstartpoint",{"_index":404,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["gettag",{"_index":557,"title":{},"body":{"classes/MspOperation.html":{}}}],["getting",{"_index":772,"title":{"index.html":{}},"body":{}}],["gi",{"_index":344,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["give",{"_index":495,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["gm').exec(text",{"_index":711,"title":{},"body":{"classes/TextRange.html":{}}}],["gp",{"_index":239,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["graph",{"_index":865,"title":{},"body":{"index.html":{},"modules.html":{}}}],["h",{"_index":226,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["hasn't",{"_index":494,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["help",{"_index":869,"title":{},"body":{"index.html":{}}}],["hint",{"_index":33,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["hint.replace",{"_index":279,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["hint.replace(/\\s+/g",{"_index":283,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["hint.trim",{"_index":275,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["historical",{"_index":25,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/enumerations.html":{}}}],["historicaldate",{"_index":393,"title":{"classes/HistoricalDate.html":{}},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{}}}],["historicaldatemodel",{"_index":398,"title":{"interfaces/HistoricalDateModel.html":{}},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{}}}],["historicaldatetype",{"_index":419,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/enumerations.html":{}}}],["historicaldatetype.point",{"_index":518,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["historicaldatetype.range",{"_index":515,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["historicaldatetype.undefined",{"_index":522,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["http://localhost:4200",{"_index":838,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/3561493/is",{"_index":285,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["i.e",{"_index":135,"title":{},"body":{"classes/Datation.html":{},"classes/RomanNumber.html":{}}}],["i/i",{"_index":346,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["identifier",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["iiii",{"_index":651,"title":{},"body":{"classes/RomanNumber.html":{}}}],["iixxcc",{"_index":619,"title":{},"body":{"classes/RomanNumber.html":{}}}],["implement",{"_index":569,"title":{},"body":{"classes/MspOperation.html":{}}}],["implemented",{"_index":246,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["implements",{"_index":27,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["implicit",{"_index":241,"title":{},"body":{"classes/Datation.html":{}}}],["import",{"_index":7,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{}}}],["imported",{"_index":833,"title":{},"body":{"index.html":{}}}],["imports",{"_index":13,"title":{},"body":{"modules/CoreModule.html":{}}}],["include",{"_index":163,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"index.html":{}}}],["including",{"_index":396,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["inclusive",{"_index":698,"title":{},"body":{"classes/TextRange.html":{}}}],["index",{"_index":29,"title":{"index.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indication",{"_index":482,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["insert",{"_index":562,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["instead",{"_index":652,"title":{},"body":{"classes/RomanNumber.html":{}}}],["integrate",{"_index":480,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["integration",{"_index":491,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["interactive",{"_index":789,"title":{},"body":{"index.html":{}}}],["interface",{"_index":245,"title":{"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"interfaces/HistoricalDateModel.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{}}}],["interfaces",{"_index":392,"title":{},"body":{"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"interfaces/HistoricalDateModel.html":{},"overview.html":{}}}],["invalid",{"_index":464,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["isabout",{"_index":405,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["isapproximate",{"_index":34,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["iscaseequal",{"_index":582,"title":{},"body":{"classes/RomanNumber.html":{}}}],["iscaseequal(c1",{"_index":633,"title":{},"body":{"classes/RomanNumber.html":{}}}],["iscentury",{"_index":35,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["isdubious",{"_index":36,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{}}}],["isequal",{"_index":692,"title":{},"body":{"classes/TextRange.html":{}}}],["isequal(other",{"_index":699,"title":{},"body":{"classes/TextRange.html":{}}}],["islower",{"_index":583,"title":{},"body":{"classes/RomanNumber.html":{}}}],["islower(c",{"_index":637,"title":{},"body":{"classes/RomanNumber.html":{}}}],["isspan",{"_index":37,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["isundefined",{"_index":49,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["isupper",{"_index":584,"title":{},"body":{"classes/RomanNumber.html":{}}}],["isupper(c",{"_index":639,"title":{},"body":{"classes/RomanNumber.html":{}}}],["it's",{"_index":453,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["iv",{"_index":445,"title":{},"body":{"classes/HistoricalDate.html":{},"classes/RomanNumber.html":{}}}],["ivxivx",{"_index":304,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["ivxlcdm",{"_index":617,"title":{},"body":{"classes/RomanNumber.html":{}}}],["ix",{"_index":603,"title":{},"body":{"classes/RomanNumber.html":{}}}],["jan",{"_index":262,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":287,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["jest",{"_index":857,"title":{},"body":{"index.html":{}}}],["js",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["jul",{"_index":267,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["jun",{"_index":266,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["l",{"_index":586,"title":{},"body":{"classes/RomanNumber.html":{}}}],["last",{"_index":385,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["last.endswith",{"_index":387,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["learn",{"_index":871,"title":{},"body":{"index.html":{}}}],["left",{"_index":213,"title":{},"body":{"classes/Datation.html":{}}}],["legend",{"_index":876,"title":{},"body":{"overview.html":{}}}],["length",{"_index":689,"title":{},"body":{"classes/TextRange.html":{}}}],["less",{"_index":97,"title":{},"body":{"classes/Datation.html":{}}}],["letter",{"_index":628,"title":{},"body":{"classes/RomanNumber.html":{}}}],["letters",{"_index":645,"title":{},"body":{"classes/RomanNumber.html":{}}}],["lib",{"_index":831,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":802,"title":{},"body":{"index.html":{}}}],["library",{"_index":829,"title":{},"body":{"index.html":{}}}],["libs/.../datation.ts",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../historical",{"_index":769,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["libs/.../msp",{"_index":770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/core/src/lib/core.module.ts",{"_index":6,"title":{},"body":{"modules/CoreModule.html":{}}}],["libs/core/src/lib/datation.ts",{"_index":21,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/core/src/lib/datation.ts:103",{"_index":109,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:111",{"_index":118,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:140",{"_index":150,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:208",{"_index":192,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:229",{"_index":158,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:243",{"_index":85,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:257",{"_index":142,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:264",{"_index":120,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:291",{"_index":122,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:305",{"_index":91,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:314",{"_index":147,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:327",{"_index":155,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:429",{"_index":197,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:48",{"_index":83,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:49",{"_index":79,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:50",{"_index":81,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:51",{"_index":78,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:52",{"_index":80,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:53",{"_index":75,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:54",{"_index":82,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:55",{"_index":61,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:79",{"_index":160,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/datation.ts:94",{"_index":157,"title":{},"body":{"classes/Datation.html":{}}}],["libs/core/src/lib/historical",{"_index":394,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["libs/core/src/lib/msp",{"_index":540,"title":{},"body":{"classes/MspOperation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["libs/core/src/lib/roman",{"_index":570,"title":{},"body":{"classes/RomanNumber.html":{},"coverage.html":{}}}],["libs/core/src/lib/text",{"_index":685,"title":{},"body":{"classes/TextRange.html":{},"coverage.html":{}}}],["line:no",{"_index":681,"title":{},"body":{"classes/RomanNumber.html":{}}}],["literal",{"_index":389,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["lowercase",{"_index":202,"title":{},"body":{"classes/Datation.html":{}}}],["lowermonth",{"_index":320,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m",{"_index":216,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["m1",{"_index":488,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m1.index",{"_index":503,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m1[1",{"_index":493,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m1[2",{"_index":506,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m1[3",{"_index":507,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m2",{"_index":498,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m2[1",{"_index":500,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["m[1",{"_index":313,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[2",{"_index":315,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/TextRange.html":{}}}],["m[3",{"_index":319,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[3].tolowercase",{"_index":321,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[4",{"_index":325,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[5",{"_index":328,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[7",{"_index":332,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[7].replace",{"_index":333,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[8",{"_index":337,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["m[9",{"_index":339,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["many",{"_index":795,"title":{},"body":{"index.html":{}}}],["mar",{"_index":264,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["mark",{"_index":179,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["marker",{"_index":205,"title":{},"body":{"classes/Datation.html":{}}}],["match",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":17,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchtokenat",{"_index":50,"title":{},"body":{"classes/Datation.html":{}}}],["matchtokenat(token",{"_index":145,"title":{},"body":{"classes/Datation.html":{}}}],["math.abs(this.value",{"_index":368,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["max",{"_index":447,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["message",{"_index":463,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["method",{"_index":134,"title":{},"body":{"classes/Datation.html":{}}}],["methods",{"_index":40,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["middle",{"_index":456,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["min",{"_index":448,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["minus",{"_index":449,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["minute",{"_index":785,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":767,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":523,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["misspelling",{"_index":542,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["misspellings",{"_index":690,"title":{},"body":{"classes/TextRange.html":{}}}],["mm",{"_index":217,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["mmm",{"_index":218,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["module",{"_index":0,"title":{"modules/CoreModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/CoreModule.html":{},"modules.html":{}}}],["mon",{"_index":256,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["monorepos",{"_index":783,"title":{},"body":{"index.html":{}}}],["month",{"_index":38,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["monthnames",{"_index":253,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":872,"title":{},"body":{"index.html":{}}}],["move",{"_index":563,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["mspoperation",{"_index":539,"title":{"classes/MspOperation.html":{}},"body":{"classes/MspOperation.html":{},"coverage.html":{}}}],["mspoperator",{"_index":552,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["multiple",{"_index":828,"title":{},"body":{"index.html":{}}}],["multiplies",{"_index":646,"title":{},"body":{"classes/RomanNumber.html":{}}}],["n",{"_index":714,"title":{},"body":{"classes/TextRange.html":{}}}],["name",{"_index":68,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["name.tolowercase",{"_index":323,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["natum",{"_index":223,"title":{},"body":{"classes/Datation.html":{}}}],["navigate",{"_index":837,"title":{},"body":{"index.html":{}}}],["negative",{"_index":417,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["nest",{"_index":817,"title":{},"body":{"index.html":{}}}],["new",{"_index":63,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{},"coverage.html":{},"index.html":{}}}],["newly",{"_index":72,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["next",{"_index":680,"title":{},"body":{"classes/RomanNumber.html":{}}}],["ng",{"_index":810,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":9,"title":{},"body":{"modules/CoreModule.html":{}}}],["node",{"_index":821,"title":{},"body":{"index.html":{}}}],["normalize",{"_index":282,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["normalized",{"_index":184,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["notation",{"_index":629,"title":{},"body":{"classes/RomanNumber.html":{}}}],["nov",{"_index":271,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["nrwl/angular",{"_index":754,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["nrwl/angular:app",{"_index":826,"title":{},"body":{"index.html":{}}}],["nrwl/angular:lib",{"_index":830,"title":{},"body":{"index.html":{}}}],["nrwl/express",{"_index":820,"title":{},"body":{"index.html":{}}}],["nrwl/nest",{"_index":818,"title":{},"body":{"index.html":{}}}],["nrwl/node",{"_index":822,"title":{},"body":{"index.html":{}}}],["nrwl/react",{"_index":812,"title":{},"body":{"index.html":{}}}],["nrwl/web",{"_index":816,"title":{},"body":{"index.html":{}}}],["null",{"_index":96,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["number",{"_index":74,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"miscellaneous/variables.html":{}}}],["number.ts",{"_index":571,"title":{},"body":{"classes/RomanNumber.html":{},"coverage.html":{}}}],["number.ts:116",{"_index":638,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:120",{"_index":640,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:124",{"_index":635,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:131",{"_index":631,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:146",{"_index":624,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:22",{"_index":588,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:37",{"_index":616,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:52",{"_index":604,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:67",{"_index":618,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:68",{"_index":620,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:69",{"_index":621,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:7",{"_index":598,"title":{},"body":{"classes/RomanNumber.html":{}}}],["number.ts:80",{"_index":644,"title":{},"body":{"classes/RomanNumber.html":{}}}],["numeric",{"_index":625,"title":{},"body":{"classes/RomanNumber.html":{}}}],["nx",{"_index":778,"title":{},"body":{"index.html":{}}}],["oct",{"_index":270,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["omit",{"_index":533,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["operation",{"_index":543,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts",{"_index":541,"title":{},"body":{"classes/MspOperation.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["operation.ts:16",{"_index":553,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:17",{"_index":554,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:18",{"_index":551,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:19",{"_index":555,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:20",{"_index":556,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:22",{"_index":558,"title":{},"body":{"classes/MspOperation.html":{}}}],["operation.ts:25",{"_index":560,"title":{},"body":{"classes/MspOperation.html":{}}}],["operations",{"_index":691,"title":{},"body":{"classes/TextRange.html":{}}}],["operator",{"_index":771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["optional",{"_index":70,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["optionally",{"_index":64,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["options",{"_index":114,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/variables.html":{}}}],["options.adtext",{"_index":291,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["options.bctext",{"_index":289,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["options.bctext.tolowercase",{"_index":335,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["options.monthnames.findindex(name",{"_index":322,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["other.length",{"_index":718,"title":{},"body":{"classes/TextRange.html":{}}}],["other.start",{"_index":716,"title":{},"body":{"classes/TextRange.html":{}}}],["out",{"_index":882,"title":{},"body":{"overview.html":{}}}],["overview",{"_index":875,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":207,"title":{},"body":{"classes/Datation.html":{}}}],["p.c",{"_index":501,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["package",{"_index":744,"title":{"dependencies.html":{}},"body":{}}],["padded",{"_index":212,"title":{},"body":{"classes/Datation.html":{}}}],["param",{"_index":273,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["parameters",{"_index":67,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["parsable",{"_index":705,"title":{},"body":{"classes/TextRange.html":{}}}],["parse",{"_index":51,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["parse(text",{"_index":149,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["parsed",{"_index":152,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["parseformatstring",{"_index":52,"title":{},"body":{"classes/Datation.html":{}}}],["parseformatstring(format",{"_index":154,"title":{},"body":{"classes/Datation.html":{}}}],["parseint(m[1",{"_index":713,"title":{},"body":{"classes/TextRange.html":{}}}],["parseint(m[2",{"_index":317,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/TextRange.html":{}}}],["parseint(m[4",{"_index":327,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["past",{"_index":528,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["patch",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["patterns",{"_index":112,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["perhaps",{"_index":208,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["place",{"_index":660,"title":{},"body":{"classes/RomanNumber.html":{}}}],["plugins",{"_index":796,"title":{},"body":{"index.html":{}}}],["plus",{"_index":450,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["point",{"_index":24,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/enumerations.html":{}}}],["points",{"_index":397,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["post",{"_index":225,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{}}}],["preceding",{"_index":349,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["predefined",{"_index":451,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["preferred",{"_index":649,"title":{},"body":{"classes/RomanNumber.html":{}}}],["prefix",{"_index":647,"title":{},"body":{"classes/RomanNumber.html":{}}}],["present",{"_index":206,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["private",{"_index":45,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{}}}],["prod",{"_index":850,"title":{},"body":{"index.html":{}}}],["production",{"_index":851,"title":{},"body":{"index.html":{}}}],["project",{"_index":775,"title":{},"body":{"index.html":{}}}],["project=my",{"_index":845,"title":{},"body":{"index.html":{}}}],["projects",{"_index":807,"title":{},"body":{"index.html":{}}}],["properties",{"_index":30,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["providers",{"_index":879,"title":{},"body":{"overview.html":{}}}],["public",{"_index":31,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["querystring",{"_index":655,"title":{},"body":{"classes/RomanNumber.html":{}}}],["quick",{"_index":784,"title":{},"body":{"index.html":{}}}],["range",{"_index":425,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{},"miscellaneous/enumerations.html":{}}}],["range.ts",{"_index":686,"title":{},"body":{"classes/TextRange.html":{},"coverage.html":{}}}],["range.ts:14",{"_index":695,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:22",{"_index":701,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:34",{"_index":694,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:47",{"_index":697,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:56",{"_index":700,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:67",{"_index":704,"title":{},"body":{"classes/TextRange.html":{}}}],["range.ts:9",{"_index":696,"title":{},"body":{"classes/TextRange.html":{}}}],["react",{"_index":811,"title":{},"body":{"index.html":{}}}],["received",{"_index":189,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["regexescape",{"_index":53,"title":{},"body":{"classes/Datation.html":{}}}],["regexescape(text",{"_index":156,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["regexp",{"_index":119,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["regexp('([gg])[ap",{"_index":343,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["regexp('(\\\\d+)(?:[×x](\\\\d",{"_index":710,"title":{},"body":{"classes/TextRange.html":{}}}],["regexp('[ww]?[ee][ap",{"_index":351,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["regexp('\\\\s",{"_index":391,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["reload",{"_index":840,"title":{},"body":{"index.html":{}}}],["remove",{"_index":348,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{}}}],["replace",{"_index":277,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["replaced",{"_index":167,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["representation",{"_index":439,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["represented",{"_index":128,"title":{},"body":{"classes/Datation.html":{}}}],["representing",{"_index":151,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["required",{"_index":484,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["reserved",{"_index":164,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["reset",{"_index":54,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"overview.html":{}}}],["respectively",{"_index":140,"title":{},"body":{"classes/Datation.html":{}}}],["result",{"_index":16,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":186,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["results",{"_index":18,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":276,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["returned",{"_index":190,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["returns",{"_index":89,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["roman",{"_index":244,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{}}}],["roman.touppercase",{"_index":673,"title":{},"body":{"classes/RomanNumber.html":{}}}],["roman[index",{"_index":675,"title":{},"body":{"classes/RomanNumber.html":{}}}],["romannumber",{"_index":243,"title":{"classes/RomanNumber.html":{}},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{},"coverage.html":{}}}],["romannumber.fromroman(m[6].touppercase",{"_index":330,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["romannumber.toroman(math.abs(this.value)).tolowercase",{"_index":366,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["romannumber.toroman(math.abs(this.value)).touppercase",{"_index":367,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["run",{"_index":825,"title":{},"body":{"index.html":{}}}],["running",{"_index":852,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":232,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{}}}],["s*\\\\{?:([^)]+)\\\\})?\\\\s",{"_index":487,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["s.replace('iv",{"_index":661,"title":{},"body":{"classes/RomanNumber.html":{}}}],["s.replace('ix",{"_index":662,"title":{},"body":{"classes/RomanNumber.html":{}}}],["s1",{"_index":474,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["s2",{"_index":476,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["same",{"_index":532,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"index.html":{}}}],["samples",{"_index":137,"title":{},"body":{"classes/Datation.html":{}}}],["sanitize",{"_index":161,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sanitized",{"_index":187,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sanitizehint",{"_index":55,"title":{},"body":{"classes/Datation.html":{}}}],["sanitizehint(hint",{"_index":159,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sat",{"_index":261,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["sb",{"_index":529,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb.join",{"_index":538,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{}}}],["sb.join('').trim().replace(new",{"_index":390,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.length",{"_index":384,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push",{"_index":383,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb.push(`/${year",{"_index":370,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(options.adtext",{"_index":382,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(options.daynames[dow",{"_index":377,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(options.monthnames[this.month",{"_index":380,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this._postalpha[place",{"_index":657,"title":{},"body":{"classes/RomanNumber.html":{}}}],["sb.push(this._prealpha[place",{"_index":659,"title":{},"body":{"classes/RomanNumber.html":{}}}],["sb.push(this.a.tostring(datation.stripformatstringera(format",{"_index":536,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb.push(this.a.tostring(format",{"_index":530,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb.push(this.b.tostring(format",{"_index":537,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb.push(this.day.tostring",{"_index":371,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this.day.tostring().padstart(2",{"_index":373,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this.getsortvalue().tostring",{"_index":388,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this.month.tostring",{"_index":378,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this.month.tostring().padstart(2",{"_index":379,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(this.value",{"_index":381,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(token",{"_index":365,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb.push(year.tostring",{"_index":369,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sb1",{"_index":502,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb1.join",{"_index":508,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb1.push",{"_index":505,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb1.push(s1.substr(0",{"_index":504,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["sb[sb.length",{"_index":386,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["scaffolding",{"_index":843,"title":{},"body":{"index.html":{}}}],["see",{"_index":866,"title":{},"body":{"index.html":{}}}],["sep",{"_index":269,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["separate",{"_index":176,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sequence",{"_index":165,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["serve",{"_index":836,"title":{},"body":{"index.html":{}}}],["server",{"_index":247,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"index.html":{}}}],["set",{"_index":566,"title":{},"body":{"classes/MspOperation.html":{},"index.html":{}}}],["setendpoint",{"_index":406,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["setendpoint(value",{"_index":430,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["setsinglepoint",{"_index":407,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["setsinglepoint(value",{"_index":432,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["setstartpoint",{"_index":408,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["setstartpoint(value",{"_index":434,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["settag(value",{"_index":559,"title":{},"body":{"classes/MspOperation.html":{}}}],["setting",{"_index":65,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sharable",{"_index":832,"title":{},"body":{"index.html":{}}}],["showing",{"_index":787,"title":{},"body":{"index.html":{}}}],["simple",{"_index":182,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/TextRange.html":{}}}],["single",{"_index":23,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{}}}],["smart",{"_index":228,"title":{},"body":{"classes/Datation.html":{}}}],["sort",{"_index":121,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["source",{"_index":4,"title":{},"body":{"modules/CoreModule.html":{},"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"index.html":{}}}],["space",{"_index":170,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["spaces",{"_index":183,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["span",{"_index":125,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{}}}],["specified",{"_index":87,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["start",{"_index":687,"title":{},"body":{"classes/TextRange.html":{},"index.html":{}}}],["start/end",{"_index":185,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["started",{"_index":773,"title":{"index.html":{}},"body":{}}],["startxlength",{"_index":703,"title":{},"body":{"classes/TextRange.html":{}}}],["statements",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":43,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["stored",{"_index":847,"title":{},"body":{"index.html":{}}}],["string",{"_index":76,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["stringify",{"_index":654,"title":{},"body":{"classes/RomanNumber.html":{}}}],["strip",{"_index":193,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["stripformatstringera",{"_index":56,"title":{},"body":{"classes/Datation.html":{}}}],["stripformatstringera(format",{"_index":191,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["sun",{"_index":255,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["supports",{"_index":794,"title":{},"body":{"index.html":{}}}],["swap",{"_index":564,"title":{},"body":{"classes/MspOperation.html":{},"miscellaneous/enumerations.html":{}}}],["switch",{"_index":363,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["table",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":550,"title":{},"body":{"classes/MspOperation.html":{}}}],["tag(value",{"_index":567,"title":{},"body":{"classes/MspOperation.html":{}}}],["tailregexp",{"_index":486,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["tailregexp.exec(s1",{"_index":489,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["tailregexp.exec(s2",{"_index":499,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["terminus",{"_index":460,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["terms",{"_index":479,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["test",{"_index":806,"title":{},"body":{"index.html":{}}}],["tests",{"_index":854,"title":{},"body":{"index.html":{}}}],["text",{"_index":146,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["text.length",{"_index":362,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["text.replace",{"_index":288,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["text.split",{"_index":473,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["textrange",{"_index":684,"title":{"classes/TextRange.html":{}},"body":{"classes/TextRange.html":{},"coverage.html":{}}}],["textual",{"_index":438,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/TextRange.html":{}}}],["this._postval[place",{"_index":656,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._preval[place",{"_index":658,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._romandigits.indexof(digit.touppercase",{"_index":670,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._romandigits.indexof(roman[index",{"_index":674,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._romansubdigits[i].touppercase",{"_index":677,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._romanvalues[i",{"_index":672,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this._tag",{"_index":565,"title":{},"body":{"classes/MspOperation.html":{}}}],["this.a",{"_index":468,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.a.getsortvalue",{"_index":525,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.a.isundefined",{"_index":519,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.a.value",{"_index":534,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.b",{"_index":470,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.b.getsortvalue",{"_index":527,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.b.isundefined",{"_index":520,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.b.value",{"_index":535,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.copyfrom(datation",{"_index":274,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.day",{"_index":357,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.getdatetype",{"_index":514,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.geterasoptionsforregex(options",{"_index":294,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.getparserregex(options",{"_index":311,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.getromandigitvalue(this._romansubdigits[i",{"_index":683,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.hint",{"_index":359,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.isapproximate",{"_index":356,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.iscaseequal(roman[index",{"_index":678,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.iscentury",{"_index":353,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.isdubious",{"_index":360,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.islower(c1",{"_index":666,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.islower(c2",{"_index":667,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.islower(digit",{"_index":671,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.isspan",{"_index":355,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.isundefined",{"_index":521,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["this.isupper(c1",{"_index":668,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.isupper(c2",{"_index":669,"title":{},"body":{"classes/RomanNumber.html":{}}}],["this.length",{"_index":717,"title":{},"body":{"classes/TextRange.html":{}}}],["this.month",{"_index":358,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.regexescape(options.adtext",{"_index":292,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.regexescape(options.bctext",{"_index":290,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["this.start",{"_index":715,"title":{},"body":{"classes/TextRange.html":{}}}],["this.start.tostring",{"_index":719,"title":{},"body":{"classes/TextRange.html":{}}}],["this.start}×${this.length",{"_index":720,"title":{},"body":{"classes/TextRange.html":{}}}],["this.value",{"_index":352,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["throw",{"_index":706,"title":{},"body":{"classes/TextRange.html":{}}}],["thu",{"_index":259,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":568,"title":{},"body":{"classes/MspOperation.html":{}}}],["token",{"_index":148,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["tolowercase",{"_index":334,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["tools",{"_index":782,"title":{},"body":{"index.html":{}}}],["toroman",{"_index":585,"title":{},"body":{"classes/RomanNumber.html":{}}}],["toroman(value",{"_index":641,"title":{},"body":{"classes/RomanNumber.html":{}}}],["tostring",{"_index":57,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/TextRange.html":{}}}],["tostring(format",{"_index":196,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["toyear",{"_index":409,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["toyear(useterminusspan",{"_index":440,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["trim",{"_index":284,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["true",{"_index":143,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{}}}],["try",{"_index":490,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["tslint:disable",{"_index":679,"title":{},"body":{"classes/RomanNumber.html":{}}}],["tue",{"_index":257,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["tutorial",{"_index":790,"title":{},"body":{"index.html":{}}}],["two",{"_index":177,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["type",{"_index":69,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":799,"title":{},"body":{"index.html":{}}}],["u+2014",{"_index":171,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["u2014",{"_index":280,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["undefined",{"_index":144,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"miscellaneous/enumerations.html":{}}}],["understand",{"_index":863,"title":{},"body":{"index.html":{}}}],["unicode",{"_index":168,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["unique",{"_index":141,"title":{},"body":{"classes/Datation.html":{}}}],["unit",{"_index":853,"title":{},"body":{"index.html":{}}}],["up",{"_index":496,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["uppercase",{"_index":203,"title":{},"body":{"classes/Datation.html":{}}}],["use",{"_index":648,"title":{},"body":{"classes/RomanNumber.html":{},"index.html":{}}}],["used",{"_index":175,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/TextRange.html":{}}}],["useterminusspan",{"_index":458,"title":{},"body":{"classes/HistoricalDate.html":{}}}],["using",{"_index":777,"title":{},"body":{"index.html":{}}}],["v",{"_index":201,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/RomanNumber.html":{}}}],["valid",{"_index":465,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["validate",{"_index":410,"title":{},"body":{"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["value",{"_index":39,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{},"classes/MspOperation.html":{},"classes/RomanNumber.html":{},"classes/TextRange.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":883,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":856,"title":{},"body":{"index.html":{}}}],["video",{"_index":786,"title":{},"body":{"index.html":{}}}],["viii",{"_index":663,"title":{},"body":{"classes/RomanNumber.html":{}}}],["viiii",{"_index":653,"title":{},"body":{"classes/RomanNumber.html":{}}}],["visit",{"_index":870,"title":{},"body":{"index.html":{}}}],["void",{"_index":90,"title":{},"body":{"classes/Datation.html":{},"classes/HistoricalDate.html":{},"classes/MspOperation.html":{}}}],["w",{"_index":227,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["w/w",{"_index":350,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["web",{"_index":813,"title":{},"body":{"index.html":{}}}],["wed",{"_index":258,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"miscellaneous/variables.html":{}}}],["weekday",{"_index":215,"title":{},"body":{"classes/Datation.html":{}}}],["well",{"_index":804,"title":{},"body":{"index.html":{}}}],["whitespace",{"_index":229,"title":{},"body":{"classes/Datation.html":{}}}],["whitespaces",{"_index":180,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["workspace",{"_index":793,"title":{},"body":{"index.html":{}}}],["x",{"_index":587,"title":{},"body":{"classes/RomanNumber.html":{}}}],["x1f50e",{"_index":779,"title":{},"body":{"index.html":{}}}],["xc",{"_index":601,"title":{},"body":{"classes/RomanNumber.html":{}}}],["xl",{"_index":602,"title":{},"body":{"classes/RomanNumber.html":{}}}],["year",{"_index":100,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{},"classes/HistoricalDate.html":{},"interfaces/HistoricalDateModel.html":{}}}],["year/span",{"_index":300,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["years",{"_index":124,"title":{},"body":{"classes/Datation.html":{}}}],["z]{3,})\\\\s",{"_index":299,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["za",{"_index":298,"title":{},"body":{"classes/Datation.html":{},"interfaces/DatationFormatOptions.html":{},"interfaces/DatationModel.html":{}}}],["zone.js",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":881,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/core/src/lib/core.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Datation.html":{"url":"classes/Datation.html","title":"class - Datation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Datation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/datation.ts\n        \n\n            \n                Description\n            \n            \n                Single datation point in a historical date.\n\n            \n\n\n            \n                Implements\n            \n            \n                            DatationModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                day\n                            \n                            \n                                    Public\n                                hint\n                            \n                            \n                                    Public\n                                isApproximate\n                            \n                            \n                                    Public\n                                isCentury\n                            \n                            \n                                    Public\n                                isDubious\n                            \n                            \n                                    Public\n                                isSpan\n                            \n                            \n                                    Public\n                                month\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                copyFrom\n                            \n                            \n                                    Public\n                                getCentury\n                            \n                            \n                                    Static\n                                getErasOptionsForRegex\n                            \n                            \n                                    Private\n                                    Static\n                                getParserRegex\n                            \n                            \n                                    Public\n                                getSortValue\n                            \n                            \n                                    Public\n                                getSpanEnd\n                            \n                            \n                                    Public\n                                isUndefined\n                            \n                            \n                                    Private\n                                matchTokenAt\n                            \n                            \n                                    Static\n                                parse\n                            \n                            \n                                    Private\n                                parseFormatString\n                            \n                            \n                                    Private\n                                    Static\n                                regexEscape\n                            \n                            \n                                    Public\n                                reset\n                            \n                            \n                                    Static\n                                sanitizeHint\n                            \n                            \n                                    Static\n                                stripFormatStringEra\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datation: DatationModel)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/datation.ts:55\n                            \n                        \n\n                \n                    \n                            Create a new datation, optionally setting its data.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        datation\n                                                  \n                                                        \n                                                                        DatationModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The optional data to be copied into the newly created datation.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            day\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hint\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isApproximate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isCentury\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDubious\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isSpan\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            month\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/datation.ts:48\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            copyFrom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    copyFrom(datation: DatationModel)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:243\n                \n            \n\n\n            \n                \n                    Copy data from the specified source datatation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    datation\n                                    \n                                                DatationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The source datation.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCentury\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCentury()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:305\n                \n            \n\n\n            \n                \n                    Get the century number corresponding this datation.\nThis function returns 0 if the datation is null, or the century number,\nless than 0 if B.C. The result is based on the century value, if\nthis is a century datation, or on the year, if this is not a century\ndatation (e.g. -5 for 480 B.C., +1 for 31 A.D.).\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getErasOptionsForRegex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getErasOptionsForRegex(options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:103\n                \n            \n\n\n            \n                \n                    Get BC and AD patterns for matching.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DATATION_FORMAT_OPTIONS\n                                    \n\n                                    \n                                        The datation format options.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getParserRegex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getParserRegex(options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     RegExp\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSortValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSortValue()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:264\n                \n            \n\n\n            \n                \n                    Get a sort value from this datation.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSpanEnd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSpanEnd()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:291\n                \n            \n\n\n            \n                \n                    Get the 2-years span end value from this datation.\nA span year is always represented with its beginning year: e.g. -776/5\nis -776 with span, and 56/7 is 56 with span. This method returns the end year\nfor a span, i.e. in the above samples -775 and 57 respectively. If this datation\nis not a span, the function just returns the unique year value.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isUndefined\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUndefined()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:257\n                \n            \n\n\n            \n                \n                    True if this datation is undefined.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            matchTokenAt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    matchTokenAt(token: string, text: string, index: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:314\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            parse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(text: string, options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:140\n                \n            \n\n\n            \n                \n                    Parse the specified text representing a datation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The text to be parsed.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DATATION_FORMAT_OPTIONS\n                                    \n\n                                    \n                                        The formatter options.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Datation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            parseFormatString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseFormatString(format: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:327\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    format\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            regexEscape\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    regexEscape(text: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:229\n                \n            \n\n\n            \n                \n                    Reset this datation.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            sanitizeHint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizeHint(hint: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:79\n                \n            \n\n\n            \n                \n                    Sanitize the hint text representing a Datation's hint so that it does not\ninclude the reserved sequence -- (which gets replaced with Unicode EM\nspace U+2014), nor the braces. This is because the double dashes are used\nto separate two datations, and braces to mark a hint in a datation.\nAlso, the whitespaces are all flattened to simple spaces, and normalized\n(no whitespaces at start/end and no sequence of whitespaces).\nIf the resulting sanitized string is empty, or it was null when received,\nnull is returned.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The hint or null.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The sanitized hint or null.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            stripFormatStringEra\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stripFormatStringEra(format: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:208\n                \n            \n\n\n            \n                \n                    Strip any era code from the specified datation format string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    format\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The format string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString(format: string, options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/datation.ts:429\n                \n            \n\n\n            \n                \n                    Convert this datation to a string.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    format\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'G'\n                                    \n\n                                    \n                                        The format string, which can include any of the following:\nv = year or century value, lowercase\nV = year or century value, uppercase\nc = century, lowercase\nC = century, uppercase\na or A = 'about' marker when present\np or P = 'perhaps' marker when present\nd = day number when present\ndd = 2-digits (0-padded at left) day number when present\nddd = weekday name when present\nM = month number when present\nMM = 2-digits (0-padded at left) month number when present\nMMM = month name when present\ne = era\nE = era, all uppercase\nea = era, only if ante Christum natum\nep = era, only if post Christum natum\nEa = era all uppercase, only if ante Christum natum\nEp = era all uppercase, only if post Christum natum\nh or H = hint when present\nw or W = smart whitespace (appended only when left char if any\nis not a whitespace)\ns or S = sort value\ng = generic: equal to awdwMMMwvwewpwh\nG = generic uppercase: equal to AwdwMMMwVwewPwH\nga = generic ante Christum: era expressed only when post Christum\nnatum. Equal to awdwMMMwvwepwpwh\nGa = generic uppercase ante Christum: equal to awdwMMMwvwepwpwh\ngp = generic post Christum: era expressed only when ante Christum\nnatum. Equal to awdwMMMwvweawpwh\nGp = generic uppercase post Christum: equal to awdwMMMwvweawpwh\ni = generic with implicit (=not expressed) era: equal to awdwMMMwvwpwh\nI = generic uppercase with implicit (=not expressed) era: equal to\nAwdwMMMwVwPwH\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DATATION_FORMAT_OPTIONS\n                                    \n\n                                    \n                                        The options.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { RomanNumber } from './roman-number';\n\n/**\n * Interface implemented by a single datation point in a historical date,\n * as returned from the server.\n */\nexport interface DatationModel {\n  value: number;\n  isCentury: boolean;\n  isSpan: boolean;\n  isApproximate: boolean;\n  isDubious: boolean;\n  day: number;\n  month: number;\n  hint: string;\n}\n\n/**\n * Options for formatting a datation.\n */\nexport interface DatationFormatOptions {\n  aboutText: string;\n  bcText: string;\n  adText: string;\n  dayNames: string[];\n  monthNames: string[];\n}\n\n/**\n * Default options for formatting a datation.\n */\nexport const DATATION_FORMAT_OPTIONS: DatationFormatOptions = {\n  aboutText: 'c.',\n  bcText: 'BC',\n  adText: 'AD',\n  dayNames: [\n    'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'\n  ],\n  monthNames: [\n    'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'\n  ]\n};\n\n/**\n * Single datation point in a historical date.\n */\nexport class Datation implements DatationModel {\n  public value: number;\n  public isCentury: boolean;\n  public isSpan: boolean;\n  public isApproximate: boolean;\n  public isDubious: boolean;\n  public day: number;\n  public month: number;\n  public hint: string;\n\n  /**\n   * Create a new datation, optionally setting its data.\n   * @param datation The optional data to be copied into the newly created datation.\n   */\n  constructor(datation: DatationModel = null) {\n    if (datation) {\n      this.copyFrom(datation);\n    }\n  }\n\n  /**\n   * Sanitize the hint text representing a Datation's hint so that it does not\n   * include the reserved sequence -- (which gets replaced with Unicode EM\n   * space U+2014), nor the braces. This is because the double dashes are used\n   * to separate two datations, and braces to mark a hint in a datation.\n   * Also, the whitespaces are all flattened to simple spaces, and normalized\n   * (no whitespaces at start/end and no sequence of whitespaces).\n   * If the resulting sanitized string is empty, or it was null when received,\n   * null is returned.\n   * @param hint The hint or null.\n   * @returns The sanitized hint or null.\n   */\n  public static sanitizeHint(hint: string): string {\n    if (!hint || !hint.trim()) {\n      return null;\n    }\n\n    // replace reserved characters\n    hint = hint.replace('--', '\\u2014');\n    hint = hint.replace('{', '');\n    hint = hint.replace('}', '');\n\n    // flatten and normalize whitespaces\n    const s = hint.replace(/\\s+/g, ' ').trim();\n    return s ? s : null;\n  }\n\n  private static regexEscape(text: string): string {\n    // https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    return text.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  /**\n   * Get BC and AD patterns for matching.\n   * @param options The datation format options.\n   */\n  public static getErasOptionsForRegex(options: DatationFormatOptions\n    = DATATION_FORMAT_OPTIONS): string[] {\n    return [\n      options.bcText ? this.regexEscape(options.bcText) : 'BC',\n      options.adText ? this.regexEscape(options.adText) : 'AD'\n    ]\n  }\n\n  private static getParserRegex(options: DatationFormatOptions): RegExp {\n    const bcad = this.getErasOptionsForRegex(options);\n\n    return new RegExp(\n      // about (1)\n      '(c\\\\.)?\\\\s*' +\n      // day (2)\n      '(?:([0123]\\\\d?)\\\\s+)?' +\n      // month (3)\n      '(?:([a-zA-Z]{3,})\\\\s+)?' +\n      // year/span (4,5)\n      '(?:' +\n      '(?:(\\\\d+)(?:\\\\s*/\\\\s*(\\\\d+))?)|' +\n      // century (6)\n      '([ivxIVX]+)' +\n      ')\\\\s*' +\n      // era (7)\n      '(' + bcad[0] + '|' + bcad[1] + ')?' +\n      // perhaps (8)\n      '(\\\\s*\\\\?)?' +\n      // hint (9)\n      '(?:\\\\s*\\\\{([^}]+)\\\\})?', 'i');\n  }\n\n  /**\n   * Parse the specified text representing a datation.\n   * @param text The text to be parsed.\n   * @param options The formatter options.\n   */\n  public static parse(text: string,\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS): Datation {\n    if (!text) {\n      return null;\n    }\n    const datation = new Datation();\n    const datationRegex = this.getParserRegex(options);\n    const m = datationRegex.exec(text);\n    if (!m) {\n      return null;\n    }\n\n    // about\n    if (m[1]) {\n      datation.isApproximate = true;\n    }\n\n    // day\n    if (m[2]) {\n      datation.day = parseInt(m[2], 10);\n    }\n\n    // month\n    if (m[3]) {\n      const lowerMonth = m[3].toLowerCase();\n      const i = options.monthNames.findIndex(name =>\n        name.toLowerCase() === lowerMonth);\n      if (i > -1) {\n        datation.month = i + 1;\n      }\n    }\n\n    // year, span\n    if (m[4]) {\n      datation.value = parseInt(m[4], 10);\n      if (m[5]) {\n        datation.isSpan = true;\n      }\n    } else {\n      datation.value = RomanNumber.fromRoman(m[6].toUpperCase());\n      datation.isCentury = true;\n    }\n\n    // era\n    if (m[7]) {\n      const era = m[7].replace(' ', '').toLowerCase();\n      if (era === options.bcText.toLowerCase()) {\n        datation.value = -datation.value;\n      }\n    }\n\n    // dubious\n    if (m[8]) {\n      datation.isDubious = true;\n    }\n\n    // hint\n    if (m[9]) {\n      datation.hint = Datation.sanitizeHint(m[9]);\n    }\n\n    return datation;\n  }\n\n  /**\n   * Strip any era code from the specified datation format string.\n   * @param format The format string.\n   */\n  public static stripFormatStringEra(format: string): string {\n    if (!format) {\n      return 'i';\n    }\n\n    // convert ga gp Ga Gp into simple g G\n    format = format.replace(new RegExp('([gG])[ap]', 'gi'), '$1');\n\n    // replace g/G with i/I\n    format = format.replace('g', 'i');\n    format = format.replace('G', 'I');\n\n    // remove ea ep Ea Ep with preceding w/W if any\n    format = format.replace(new RegExp('[wW]?[eE][ap]?', 'gi'), '');\n\n    return format;\n  }\n\n  /**\n   * Reset this datation.\n   */\n  public reset() {\n    this.value = 0;\n    this.isCentury = false;\n    this.isSpan = false;\n    this.isApproximate = false;\n    this.day = 0;\n    this.month = 0;\n    this.hint = null;\n  }\n\n  /**\n   * Copy data from the specified source datatation.\n   * @param datation The source datation.\n   */\n  public copyFrom(datation: DatationModel) {\n    this.value = datation.value;\n    this.isCentury = datation.isCentury;\n    this.isSpan = datation.isSpan;\n    this.isApproximate = datation.isApproximate;\n    this.isDubious = datation.isDubious;\n    this.day = datation.day;\n    this.month = datation.month;\n    this.hint = datation.hint;\n  }\n\n  /**\n   * True if this datation is undefined.\n   */\n  public isUndefined(): boolean {\n    return !this.value;\n  }\n\n  /**\n   * Get a sort value from this datation.\n   */\n  public getSortValue(): number {\n    let result: number;\n\n    if (this.isCentury) {\n      result = this.value * 100 + (this.value  0 && this.month  0 && this.day  text.length) {\n      return false;\n    }\n\n    for (let i = 0; i  {\n      switch (token) {\n        case 'v':\n        case 'V':\n          // year or century\n          if (this.isCentury) {\n            sb.push(token === 'v' ?\n              RomanNumber.toRoman(Math.abs(this.value)).toLowerCase() :\n              RomanNumber.toRoman(Math.abs(this.value)).toUpperCase());\n          } else {\n            const year = Math.abs(this.value);\n            sb.push(year.toString());\n            if (this.isSpan) {\n              sb.push(`/${year + (this.value  0) {\n            sb.push(this.day.toString());\n          }\n          break;\n        case 'dd':\n          if (this.day > 0) {\n            sb.push(this.day.toString().padStart(2, '0'));\n          }\n          break;\n        case 'ddd':\n          if (this.day > 0) {\n            const date = new Date(this.value, this.month, this.day);\n            const dow = date.getDay();\n            sb.push(options.dayNames[dow]);\n          }\n          break;\n\n        case 'M':\n          if (this.month > 0) {\n            sb.push(this.month.toString());\n          }\n          break;\n        case 'MM':\n          if (this.month > 0) {\n            sb.push(this.month.toString().padStart(2, '0'));\n          }\n          break;\n        case 'MMM':\n          if (this.month > 0) {\n            sb.push(options.monthNames[this.month - 1]);\n          }\n          break;\n\n        case 'e':\n          sb.push(this.value  0) {\n            sb.push(options.adText);\n          }\n          break;\n\n        case 'h':\n        case 'H':\n          if (this.hint) {\n            sb.push(` {${this.hint}}`);\n          }\n          break;\n\n        case 'w':\n        case 'W':\n          if (sb.length > 0) {\n            const last = sb[sb.length - 1];\n            if (!last.endsWith(' ')) {\n              sb.push(' ');\n            }\n          }\n          break;\n\n        case 's':\n        case 'S':\n          sb.push(this.getSortValue().toString());\n          break;\n\n        default:\n          // literal\n          sb.push(token);\n          break;\n      }\n    });\n    return sb.join('').trim().replace(new RegExp('\\\\s+', 'g'), ' ');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatationFormatOptions.html":{"url":"interfaces/DatationFormatOptions.html","title":"interface - DatationFormatOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatationFormatOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/datation.ts\n        \n\n            \n                Description\n            \n            \n                Options for formatting a datation.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aboutText\n                                \n                                \n                                        adText\n                                \n                                \n                                        bcText\n                                \n                                \n                                        dayNames\n                                \n                                \n                                        monthNames\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aboutText\n                                    \n                                \n                                \n                                    \n                                        aboutText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        adText\n                                    \n                                \n                                \n                                    \n                                        adText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bcText\n                                    \n                                \n                                \n                                    \n                                        bcText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dayNames\n                                    \n                                \n                                \n                                    \n                                        dayNames:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        monthNames\n                                    \n                                \n                                \n                                    \n                                        monthNames:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RomanNumber } from './roman-number';\n\n/**\n * Interface implemented by a single datation point in a historical date,\n * as returned from the server.\n */\nexport interface DatationModel {\n  value: number;\n  isCentury: boolean;\n  isSpan: boolean;\n  isApproximate: boolean;\n  isDubious: boolean;\n  day: number;\n  month: number;\n  hint: string;\n}\n\n/**\n * Options for formatting a datation.\n */\nexport interface DatationFormatOptions {\n  aboutText: string;\n  bcText: string;\n  adText: string;\n  dayNames: string[];\n  monthNames: string[];\n}\n\n/**\n * Default options for formatting a datation.\n */\nexport const DATATION_FORMAT_OPTIONS: DatationFormatOptions = {\n  aboutText: 'c.',\n  bcText: 'BC',\n  adText: 'AD',\n  dayNames: [\n    'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'\n  ],\n  monthNames: [\n    'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'\n  ]\n};\n\n/**\n * Single datation point in a historical date.\n */\nexport class Datation implements DatationModel {\n  public value: number;\n  public isCentury: boolean;\n  public isSpan: boolean;\n  public isApproximate: boolean;\n  public isDubious: boolean;\n  public day: number;\n  public month: number;\n  public hint: string;\n\n  /**\n   * Create a new datation, optionally setting its data.\n   * @param datation The optional data to be copied into the newly created datation.\n   */\n  constructor(datation: DatationModel = null) {\n    if (datation) {\n      this.copyFrom(datation);\n    }\n  }\n\n  /**\n   * Sanitize the hint text representing a Datation's hint so that it does not\n   * include the reserved sequence -- (which gets replaced with Unicode EM\n   * space U+2014), nor the braces. This is because the double dashes are used\n   * to separate two datations, and braces to mark a hint in a datation.\n   * Also, the whitespaces are all flattened to simple spaces, and normalized\n   * (no whitespaces at start/end and no sequence of whitespaces).\n   * If the resulting sanitized string is empty, or it was null when received,\n   * null is returned.\n   * @param hint The hint or null.\n   * @returns The sanitized hint or null.\n   */\n  public static sanitizeHint(hint: string): string {\n    if (!hint || !hint.trim()) {\n      return null;\n    }\n\n    // replace reserved characters\n    hint = hint.replace('--', '\\u2014');\n    hint = hint.replace('{', '');\n    hint = hint.replace('}', '');\n\n    // flatten and normalize whitespaces\n    const s = hint.replace(/\\s+/g, ' ').trim();\n    return s ? s : null;\n  }\n\n  private static regexEscape(text: string): string {\n    // https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    return text.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  /**\n   * Get BC and AD patterns for matching.\n   * @param options The datation format options.\n   */\n  public static getErasOptionsForRegex(options: DatationFormatOptions\n    = DATATION_FORMAT_OPTIONS): string[] {\n    return [\n      options.bcText ? this.regexEscape(options.bcText) : 'BC',\n      options.adText ? this.regexEscape(options.adText) : 'AD'\n    ]\n  }\n\n  private static getParserRegex(options: DatationFormatOptions): RegExp {\n    const bcad = this.getErasOptionsForRegex(options);\n\n    return new RegExp(\n      // about (1)\n      '(c\\\\.)?\\\\s*' +\n      // day (2)\n      '(?:([0123]\\\\d?)\\\\s+)?' +\n      // month (3)\n      '(?:([a-zA-Z]{3,})\\\\s+)?' +\n      // year/span (4,5)\n      '(?:' +\n      '(?:(\\\\d+)(?:\\\\s*/\\\\s*(\\\\d+))?)|' +\n      // century (6)\n      '([ivxIVX]+)' +\n      ')\\\\s*' +\n      // era (7)\n      '(' + bcad[0] + '|' + bcad[1] + ')?' +\n      // perhaps (8)\n      '(\\\\s*\\\\?)?' +\n      // hint (9)\n      '(?:\\\\s*\\\\{([^}]+)\\\\})?', 'i');\n  }\n\n  /**\n   * Parse the specified text representing a datation.\n   * @param text The text to be parsed.\n   * @param options The formatter options.\n   */\n  public static parse(text: string,\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS): Datation {\n    if (!text) {\n      return null;\n    }\n    const datation = new Datation();\n    const datationRegex = this.getParserRegex(options);\n    const m = datationRegex.exec(text);\n    if (!m) {\n      return null;\n    }\n\n    // about\n    if (m[1]) {\n      datation.isApproximate = true;\n    }\n\n    // day\n    if (m[2]) {\n      datation.day = parseInt(m[2], 10);\n    }\n\n    // month\n    if (m[3]) {\n      const lowerMonth = m[3].toLowerCase();\n      const i = options.monthNames.findIndex(name =>\n        name.toLowerCase() === lowerMonth);\n      if (i > -1) {\n        datation.month = i + 1;\n      }\n    }\n\n    // year, span\n    if (m[4]) {\n      datation.value = parseInt(m[4], 10);\n      if (m[5]) {\n        datation.isSpan = true;\n      }\n    } else {\n      datation.value = RomanNumber.fromRoman(m[6].toUpperCase());\n      datation.isCentury = true;\n    }\n\n    // era\n    if (m[7]) {\n      const era = m[7].replace(' ', '').toLowerCase();\n      if (era === options.bcText.toLowerCase()) {\n        datation.value = -datation.value;\n      }\n    }\n\n    // dubious\n    if (m[8]) {\n      datation.isDubious = true;\n    }\n\n    // hint\n    if (m[9]) {\n      datation.hint = Datation.sanitizeHint(m[9]);\n    }\n\n    return datation;\n  }\n\n  /**\n   * Strip any era code from the specified datation format string.\n   * @param format The format string.\n   */\n  public static stripFormatStringEra(format: string): string {\n    if (!format) {\n      return 'i';\n    }\n\n    // convert ga gp Ga Gp into simple g G\n    format = format.replace(new RegExp('([gG])[ap]', 'gi'), '$1');\n\n    // replace g/G with i/I\n    format = format.replace('g', 'i');\n    format = format.replace('G', 'I');\n\n    // remove ea ep Ea Ep with preceding w/W if any\n    format = format.replace(new RegExp('[wW]?[eE][ap]?', 'gi'), '');\n\n    return format;\n  }\n\n  /**\n   * Reset this datation.\n   */\n  public reset() {\n    this.value = 0;\n    this.isCentury = false;\n    this.isSpan = false;\n    this.isApproximate = false;\n    this.day = 0;\n    this.month = 0;\n    this.hint = null;\n  }\n\n  /**\n   * Copy data from the specified source datatation.\n   * @param datation The source datation.\n   */\n  public copyFrom(datation: DatationModel) {\n    this.value = datation.value;\n    this.isCentury = datation.isCentury;\n    this.isSpan = datation.isSpan;\n    this.isApproximate = datation.isApproximate;\n    this.isDubious = datation.isDubious;\n    this.day = datation.day;\n    this.month = datation.month;\n    this.hint = datation.hint;\n  }\n\n  /**\n   * True if this datation is undefined.\n   */\n  public isUndefined(): boolean {\n    return !this.value;\n  }\n\n  /**\n   * Get a sort value from this datation.\n   */\n  public getSortValue(): number {\n    let result: number;\n\n    if (this.isCentury) {\n      result = this.value * 100 + (this.value  0 && this.month  0 && this.day  text.length) {\n      return false;\n    }\n\n    for (let i = 0; i  {\n      switch (token) {\n        case 'v':\n        case 'V':\n          // year or century\n          if (this.isCentury) {\n            sb.push(token === 'v' ?\n              RomanNumber.toRoman(Math.abs(this.value)).toLowerCase() :\n              RomanNumber.toRoman(Math.abs(this.value)).toUpperCase());\n          } else {\n            const year = Math.abs(this.value);\n            sb.push(year.toString());\n            if (this.isSpan) {\n              sb.push(`/${year + (this.value  0) {\n            sb.push(this.day.toString());\n          }\n          break;\n        case 'dd':\n          if (this.day > 0) {\n            sb.push(this.day.toString().padStart(2, '0'));\n          }\n          break;\n        case 'ddd':\n          if (this.day > 0) {\n            const date = new Date(this.value, this.month, this.day);\n            const dow = date.getDay();\n            sb.push(options.dayNames[dow]);\n          }\n          break;\n\n        case 'M':\n          if (this.month > 0) {\n            sb.push(this.month.toString());\n          }\n          break;\n        case 'MM':\n          if (this.month > 0) {\n            sb.push(this.month.toString().padStart(2, '0'));\n          }\n          break;\n        case 'MMM':\n          if (this.month > 0) {\n            sb.push(options.monthNames[this.month - 1]);\n          }\n          break;\n\n        case 'e':\n          sb.push(this.value  0) {\n            sb.push(options.adText);\n          }\n          break;\n\n        case 'h':\n        case 'H':\n          if (this.hint) {\n            sb.push(` {${this.hint}}`);\n          }\n          break;\n\n        case 'w':\n        case 'W':\n          if (sb.length > 0) {\n            const last = sb[sb.length - 1];\n            if (!last.endsWith(' ')) {\n              sb.push(' ');\n            }\n          }\n          break;\n\n        case 's':\n        case 'S':\n          sb.push(this.getSortValue().toString());\n          break;\n\n        default:\n          // literal\n          sb.push(token);\n          break;\n      }\n    });\n    return sb.join('').trim().replace(new RegExp('\\\\s+', 'g'), ' ');\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatationModel.html":{"url":"interfaces/DatationModel.html","title":"interface - DatationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DatationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/datation.ts\n        \n\n            \n                Description\n            \n            \n                Interface implemented by a single datation point in a historical date,\nas returned from the server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        day\n                                \n                                \n                                        hint\n                                \n                                \n                                        isApproximate\n                                \n                                \n                                        isCentury\n                                \n                                \n                                        isDubious\n                                \n                                \n                                        isSpan\n                                \n                                \n                                        month\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        day\n                                    \n                                \n                                \n                                    \n                                        day:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hint\n                                    \n                                \n                                \n                                    \n                                        hint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isApproximate\n                                    \n                                \n                                \n                                    \n                                        isApproximate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCentury\n                                    \n                                \n                                \n                                    \n                                        isCentury:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDubious\n                                    \n                                \n                                \n                                    \n                                        isDubious:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSpan\n                                    \n                                \n                                \n                                    \n                                        isSpan:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        month\n                                    \n                                \n                                \n                                    \n                                        month:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RomanNumber } from './roman-number';\n\n/**\n * Interface implemented by a single datation point in a historical date,\n * as returned from the server.\n */\nexport interface DatationModel {\n  value: number;\n  isCentury: boolean;\n  isSpan: boolean;\n  isApproximate: boolean;\n  isDubious: boolean;\n  day: number;\n  month: number;\n  hint: string;\n}\n\n/**\n * Options for formatting a datation.\n */\nexport interface DatationFormatOptions {\n  aboutText: string;\n  bcText: string;\n  adText: string;\n  dayNames: string[];\n  monthNames: string[];\n}\n\n/**\n * Default options for formatting a datation.\n */\nexport const DATATION_FORMAT_OPTIONS: DatationFormatOptions = {\n  aboutText: 'c.',\n  bcText: 'BC',\n  adText: 'AD',\n  dayNames: [\n    'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'\n  ],\n  monthNames: [\n    'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'\n  ]\n};\n\n/**\n * Single datation point in a historical date.\n */\nexport class Datation implements DatationModel {\n  public value: number;\n  public isCentury: boolean;\n  public isSpan: boolean;\n  public isApproximate: boolean;\n  public isDubious: boolean;\n  public day: number;\n  public month: number;\n  public hint: string;\n\n  /**\n   * Create a new datation, optionally setting its data.\n   * @param datation The optional data to be copied into the newly created datation.\n   */\n  constructor(datation: DatationModel = null) {\n    if (datation) {\n      this.copyFrom(datation);\n    }\n  }\n\n  /**\n   * Sanitize the hint text representing a Datation's hint so that it does not\n   * include the reserved sequence -- (which gets replaced with Unicode EM\n   * space U+2014), nor the braces. This is because the double dashes are used\n   * to separate two datations, and braces to mark a hint in a datation.\n   * Also, the whitespaces are all flattened to simple spaces, and normalized\n   * (no whitespaces at start/end and no sequence of whitespaces).\n   * If the resulting sanitized string is empty, or it was null when received,\n   * null is returned.\n   * @param hint The hint or null.\n   * @returns The sanitized hint or null.\n   */\n  public static sanitizeHint(hint: string): string {\n    if (!hint || !hint.trim()) {\n      return null;\n    }\n\n    // replace reserved characters\n    hint = hint.replace('--', '\\u2014');\n    hint = hint.replace('{', '');\n    hint = hint.replace('}', '');\n\n    // flatten and normalize whitespaces\n    const s = hint.replace(/\\s+/g, ' ').trim();\n    return s ? s : null;\n  }\n\n  private static regexEscape(text: string): string {\n    // https://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    return text.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  /**\n   * Get BC and AD patterns for matching.\n   * @param options The datation format options.\n   */\n  public static getErasOptionsForRegex(options: DatationFormatOptions\n    = DATATION_FORMAT_OPTIONS): string[] {\n    return [\n      options.bcText ? this.regexEscape(options.bcText) : 'BC',\n      options.adText ? this.regexEscape(options.adText) : 'AD'\n    ]\n  }\n\n  private static getParserRegex(options: DatationFormatOptions): RegExp {\n    const bcad = this.getErasOptionsForRegex(options);\n\n    return new RegExp(\n      // about (1)\n      '(c\\\\.)?\\\\s*' +\n      // day (2)\n      '(?:([0123]\\\\d?)\\\\s+)?' +\n      // month (3)\n      '(?:([a-zA-Z]{3,})\\\\s+)?' +\n      // year/span (4,5)\n      '(?:' +\n      '(?:(\\\\d+)(?:\\\\s*/\\\\s*(\\\\d+))?)|' +\n      // century (6)\n      '([ivxIVX]+)' +\n      ')\\\\s*' +\n      // era (7)\n      '(' + bcad[0] + '|' + bcad[1] + ')?' +\n      // perhaps (8)\n      '(\\\\s*\\\\?)?' +\n      // hint (9)\n      '(?:\\\\s*\\\\{([^}]+)\\\\})?', 'i');\n  }\n\n  /**\n   * Parse the specified text representing a datation.\n   * @param text The text to be parsed.\n   * @param options The formatter options.\n   */\n  public static parse(text: string,\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS): Datation {\n    if (!text) {\n      return null;\n    }\n    const datation = new Datation();\n    const datationRegex = this.getParserRegex(options);\n    const m = datationRegex.exec(text);\n    if (!m) {\n      return null;\n    }\n\n    // about\n    if (m[1]) {\n      datation.isApproximate = true;\n    }\n\n    // day\n    if (m[2]) {\n      datation.day = parseInt(m[2], 10);\n    }\n\n    // month\n    if (m[3]) {\n      const lowerMonth = m[3].toLowerCase();\n      const i = options.monthNames.findIndex(name =>\n        name.toLowerCase() === lowerMonth);\n      if (i > -1) {\n        datation.month = i + 1;\n      }\n    }\n\n    // year, span\n    if (m[4]) {\n      datation.value = parseInt(m[4], 10);\n      if (m[5]) {\n        datation.isSpan = true;\n      }\n    } else {\n      datation.value = RomanNumber.fromRoman(m[6].toUpperCase());\n      datation.isCentury = true;\n    }\n\n    // era\n    if (m[7]) {\n      const era = m[7].replace(' ', '').toLowerCase();\n      if (era === options.bcText.toLowerCase()) {\n        datation.value = -datation.value;\n      }\n    }\n\n    // dubious\n    if (m[8]) {\n      datation.isDubious = true;\n    }\n\n    // hint\n    if (m[9]) {\n      datation.hint = Datation.sanitizeHint(m[9]);\n    }\n\n    return datation;\n  }\n\n  /**\n   * Strip any era code from the specified datation format string.\n   * @param format The format string.\n   */\n  public static stripFormatStringEra(format: string): string {\n    if (!format) {\n      return 'i';\n    }\n\n    // convert ga gp Ga Gp into simple g G\n    format = format.replace(new RegExp('([gG])[ap]', 'gi'), '$1');\n\n    // replace g/G with i/I\n    format = format.replace('g', 'i');\n    format = format.replace('G', 'I');\n\n    // remove ea ep Ea Ep with preceding w/W if any\n    format = format.replace(new RegExp('[wW]?[eE][ap]?', 'gi'), '');\n\n    return format;\n  }\n\n  /**\n   * Reset this datation.\n   */\n  public reset() {\n    this.value = 0;\n    this.isCentury = false;\n    this.isSpan = false;\n    this.isApproximate = false;\n    this.day = 0;\n    this.month = 0;\n    this.hint = null;\n  }\n\n  /**\n   * Copy data from the specified source datatation.\n   * @param datation The source datation.\n   */\n  public copyFrom(datation: DatationModel) {\n    this.value = datation.value;\n    this.isCentury = datation.isCentury;\n    this.isSpan = datation.isSpan;\n    this.isApproximate = datation.isApproximate;\n    this.isDubious = datation.isDubious;\n    this.day = datation.day;\n    this.month = datation.month;\n    this.hint = datation.hint;\n  }\n\n  /**\n   * True if this datation is undefined.\n   */\n  public isUndefined(): boolean {\n    return !this.value;\n  }\n\n  /**\n   * Get a sort value from this datation.\n   */\n  public getSortValue(): number {\n    let result: number;\n\n    if (this.isCentury) {\n      result = this.value * 100 + (this.value  0 && this.month  0 && this.day  text.length) {\n      return false;\n    }\n\n    for (let i = 0; i  {\n      switch (token) {\n        case 'v':\n        case 'V':\n          // year or century\n          if (this.isCentury) {\n            sb.push(token === 'v' ?\n              RomanNumber.toRoman(Math.abs(this.value)).toLowerCase() :\n              RomanNumber.toRoman(Math.abs(this.value)).toUpperCase());\n          } else {\n            const year = Math.abs(this.value);\n            sb.push(year.toString());\n            if (this.isSpan) {\n              sb.push(`/${year + (this.value  0) {\n            sb.push(this.day.toString());\n          }\n          break;\n        case 'dd':\n          if (this.day > 0) {\n            sb.push(this.day.toString().padStart(2, '0'));\n          }\n          break;\n        case 'ddd':\n          if (this.day > 0) {\n            const date = new Date(this.value, this.month, this.day);\n            const dow = date.getDay();\n            sb.push(options.dayNames[dow]);\n          }\n          break;\n\n        case 'M':\n          if (this.month > 0) {\n            sb.push(this.month.toString());\n          }\n          break;\n        case 'MM':\n          if (this.month > 0) {\n            sb.push(this.month.toString().padStart(2, '0'));\n          }\n          break;\n        case 'MMM':\n          if (this.month > 0) {\n            sb.push(options.monthNames[this.month - 1]);\n          }\n          break;\n\n        case 'e':\n          sb.push(this.value  0) {\n            sb.push(options.adText);\n          }\n          break;\n\n        case 'h':\n        case 'H':\n          if (this.hint) {\n            sb.push(` {${this.hint}}`);\n          }\n          break;\n\n        case 'w':\n        case 'W':\n          if (sb.length > 0) {\n            const last = sb[sb.length - 1];\n            if (!last.endsWith(' ')) {\n              sb.push(' ');\n            }\n          }\n          break;\n\n        case 's':\n        case 'S':\n          sb.push(this.getSortValue().toString());\n          break;\n\n        default:\n          // literal\n          sb.push(token);\n          break;\n      }\n    });\n    return sb.join('').trim().replace(new RegExp('\\\\s+', 'g'), ' ');\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HistoricalDate.html":{"url":"classes/HistoricalDate.html","title":"class - HistoricalDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HistoricalDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/historical-date.ts\n        \n\n            \n                Description\n            \n            \n                A historical date, including 0, 1, or 2 datation points.\n\n            \n\n\n            \n                Implements\n            \n            \n                            HistoricalDateModel\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                a\n                            \n                            \n                                    Public\n                                b\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                centuryToYear\n                            \n                            \n                                    Public\n                                getDateType\n                            \n                            \n                                    Public\n                                getEndPoint\n                            \n                            \n                                    Public\n                                getSinglePoint\n                            \n                            \n                                    Public\n                                getSortValue\n                            \n                            \n                                    Public\n                                getStartPoint\n                            \n                            \n                                    Public\n                                isAbout\n                            \n                            \n                                    Public\n                                isDubious\n                            \n                            \n                                    Public\n                                isUndefined\n                            \n                            \n                                    Static\n                                parse\n                            \n                            \n                                    Public\n                                setEndPoint\n                            \n                            \n                                    Public\n                                setSinglePoint\n                            \n                            \n                                    Public\n                                setStartPoint\n                            \n                            \n                                    Public\n                                toString\n                            \n                            \n                                    Public\n                                toYear\n                            \n                            \n                                    Public\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(date: HistoricalDateModel)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/historical-date.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        date\n                                                  \n                                                        \n                                                                        HistoricalDateModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            a\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Datation\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/historical-date.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            b\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Datation\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/historical-date.ts:27\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            centuryToYear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    centuryToYear(century: number)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:234\n                \n            \n\n\n            \n                \n                    Get the approximate year value from the specified century value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    century\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The century number, negative if B.C.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDateType\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDateType()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:143\n                \n            \n\n\n            \n                \n                    Get the type of this date.\n\n\n                    \n                        Returns :         HistoricalDateType\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEndPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEndPoint()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Datation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSinglePoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSinglePoint()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Datation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSortValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSortValue()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:173\n                \n            \n\n\n            \n                \n                    Get the sort value for this date.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStartPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStartPoint()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Datation\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isAbout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAbout()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:285\n                \n            \n\n\n            \n                \n                    True if any value (either in point or in range) has an about flag.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDubious\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDubious()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:309\n                \n            \n\n\n            \n                \n                    True if any value (either in point or in range) has an about flag.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isUndefined\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUndefined()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:135\n                \n            \n\n\n            \n                \n                    True if this date is undefined.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            parse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(text: string, options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:43\n                \n            \n\n\n            \n                \n                    Parse the specified text representing a historical datation.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The text to be parsed.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DATATION_FORMAT_OPTIONS\n                                    \n\n                                    \n                                        The datation formatter options.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HistoricalDate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setEndPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setEndPoint(value: Datation)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Datation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSinglePoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSinglePoint(value: Datation)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Datation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setStartPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setStartPoint(value: Datation)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Datation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString(format: string, options: DatationFormatOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:197\n                \n            \n\n\n            \n                \n                    Build a textual representation of this date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    format\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'G'\n                                    \n\n                                    \n                                        The format string.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                DatationFormatOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DATATION_FORMAT_OPTIONS\n                                    \n\n                                    \n                                        The formatter options.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toYear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toYear(useTerminusSpan)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:248\n                \n            \n\n\n            \n                \n                    Convert this date into a single approximate year value.\nFor centuries, the central century year is returned (e.g. -350 for IV B.C.\nand +350 for IV A.D.); when the date is a range with a single boundary only\n(max or min) the corresponding year minus or plus a predefined delta value\n(10) is returned; if it's a range with both boundaries (max and min),\nthe middle year between them is returned.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    useTerminusSpan\n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        True to add or remove the predefined span from\na terminus ante or post.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/historical-date.ts:154\n                \n            \n\n\n            \n                \n                    Validate this date.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Error message if invalid, or null if valid.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Datation, DatationFormatOptions, DATATION_FORMAT_OPTIONS, DatationModel } from './datation';\n\nconst APPROX_DELTA = 10;\n\n/**\n * Type of historical date.\n */\nexport enum HistoricalDateType {\n  undefined = 0,\n  point,\n  range\n}\n\n/**\n * Interface implemented by a historical date, as returned from the server.\n */\nexport interface HistoricalDateModel {\n  a: DatationModel;\n  b: DatationModel;\n}\n\n/**\n * A historical date, including 0, 1, or 2 datation points.\n */\nexport class HistoricalDate implements HistoricalDateModel {\n  public a: Datation;\n  public b: Datation;\n\n  constructor(date: HistoricalDateModel = null) {\n    if (!date) {\n      this.a = new Datation();\n    } else {\n      this.a = new Datation(date.a);\n      this.b = new Datation(date.b);\n    }\n  }\n\n  /**\n   * Parse the specified text representing a historical datation.\n   * @param text The text to be parsed.\n   * @param options The datation formatter options.\n   */\n  public static parse(text: string,\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS): HistoricalDate {\n    if (!text) {\n      return null;\n    }\n    const dates = text.split('--');\n    let s1 = dates[0].trim();\n    const s2 = dates.length > 1 ? dates[1].trim() : null;\n    if (!s1) {\n      return null;\n    }\n\n    const date = new HistoricalDate();\n    if (dates.length > 1) {\n      // if both terms are specified, integrate BC/AD indication in 1st if required\n      if (s1 && s2) {\n        const bcad = Datation.getErasOptionsForRegex(options);\n        const tailRegexp = new RegExp(\n          // era (1)\n          '(' + bcad[0] + '|' + bcad[1] + ')?' +\n          // dubious (2)\n          '(\\\\s*\\\\?)?' +\n          // hint (3)\n          '(?:\\\\s*\\\\{?:([^)]+)\\\\})?\\\\s*$', 'gi');\n        const m1 = tailRegexp.exec(s1);\n\n        // if 1st has no era try integration from 2nd\n        if (m1 && m1[1]) {\n          // get era from 2nd (if 2nd hasn't it too, give up and AD will be assumed)\n          const m2 = tailRegexp.exec(s2);\n          if (m2 && m2[1]) {\n            const era = m2[1] || 'p.C.';\n            const sb1: string[] = [];\n            if (m1.index > 0) {\n              sb1.push(s1.substr(0, m1.index));\n            }\n            sb1.push(' ' + era);\n            if (m1[2]) {\n              sb1.push('?');\n            }\n            if (m1[3]) {\n              sb1.push(` (${m1[3]})`);\n            }\n            s1 = sb1.join('');\n          }\n        }\n      }\n      date.setStartPoint(Datation.parse(s1, options));\n      date.setEndPoint(Datation.parse(s2, options));\n    } else {\n      const d = Datation.parse(s1, options);\n      if (d && !d.isUndefined()) {\n        date.setSinglePoint(d);\n      }\n    }\n\n    return date;\n  }\n\n  public getStartPoint(): Datation {\n    return this.getDateType() === HistoricalDateType.range ? this.a : null;\n  }\n\n  public setStartPoint(value: Datation) {\n    this.a = new Datation(value);\n    // it's a range, ensure max is not null\n    if (!this.b) {\n      this.b = new Datation();\n    }\n  }\n\n  public getEndPoint(): Datation {\n    return this.getDateType() === HistoricalDateType.range ? this.b : null;\n  }\n\n  public setEndPoint(value: Datation) {\n    this.b = new Datation(value);\n  }\n\n  public getSinglePoint(): Datation {\n    return this.getDateType() === HistoricalDateType.point ? this.a : null;\n  }\n\n  public setSinglePoint(value: Datation) {\n    this.a = new Datation(value);\n    // it's a point, ensure max is null\n    this.b = null;\n  }\n\n  /**\n   * True if this date is undefined.\n   */\n  public isUndefined(): boolean {\n    return !this.a ||\n      (this.a.isUndefined() && (!this.b || this.b.isUndefined()));\n  }\n\n  /**\n   * Get the type of this date.\n   */\n  public getDateType(): HistoricalDateType {\n    if (this.isUndefined()) {\n      return HistoricalDateType.undefined;\n    }\n    return this.b ? HistoricalDateType.range : HistoricalDateType.point;\n  }\n\n  /**\n   * Validate this date.\n   * @returns Error message if invalid, or null if valid.\n   */\n  public validate(): string {\n    if (!this.a) {\n      return 'Missing point A';\n    }\n\n    if (this.getDateType() === HistoricalDateType.range) {\n      const av = this.a.getSortValue();\n      const bv = this.b.getSortValue();\n      if (av && bv && av >= bv) {\n        return 'Point A is past point B';\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the sort value for this date.\n   */\n  public getSortValue(): number {\n    switch (this.getDateType()) {\n      case HistoricalDateType.point:\n        return this.a.getSortValue();\n\n      case HistoricalDateType.range:\n        if (this.a.isUndefined()) {\n          return this.b.getSortValue() - APPROX_DELTA;\n        }\n        if (this.b.isUndefined()) {\n          return this.a.getSortValue() + APPROX_DELTA;\n        }\n        return (this.a.getSortValue() + this.b.getSortValue()) / 2;\n\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Build a textual representation of this date.\n   * @param format The format string.\n   * @param options The formatter options.\n   */\n  public toString(format = 'G',\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS) {\n    const sb: string[] = [];\n\n    switch (this.getDateType()) {\n      case HistoricalDateType.point:\n        sb.push(this.a.toString(format, options));\n        break;\n\n      case HistoricalDateType.range:\n        // if both terms are present and belong to same era, omit it in 1st\n        if (!this.a.isUndefined() &&\n          this.b && !this.b.isUndefined() &&\n          this.a.value * this.b.value > 0) {\n          sb.push(this.a.toString(Datation.stripFormatStringEra(format), options));\n          sb.push(' -- ');\n          sb.push(this.b.toString(format, options));\n          break;\n        }\n\n        if (!this.a.isUndefined()) {\n          sb.push(this.a.toString(format, options) + ' ');\n        }\n        sb.push('--');\n        if (this.b && !this.b.isUndefined()) {\n          sb.push(this.b.toString(format, options));\n        }\n        break;\n    }\n\n    return sb.join('');\n  }\n\n  /**\n   * Get the approximate year value from the specified century value.\n   * @param century The century number, negative if B.C.\n   */\n  private centuryToYear(century: number): number {\n    return century * 100 + (century \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HistoricalDateModel.html":{"url":"interfaces/HistoricalDateModel.html","title":"interface - HistoricalDateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HistoricalDateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/historical-date.ts\n        \n\n            \n                Description\n            \n            \n                Interface implemented by a historical date, as returned from the server.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        a\n                                \n                                \n                                        b\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        a\n                                    \n                                \n                                \n                                    \n                                        a:         DatationModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DatationModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        b\n                                    \n                                \n                                \n                                    \n                                        b:         DatationModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DatationModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Datation, DatationFormatOptions, DATATION_FORMAT_OPTIONS, DatationModel } from './datation';\n\nconst APPROX_DELTA = 10;\n\n/**\n * Type of historical date.\n */\nexport enum HistoricalDateType {\n  undefined = 0,\n  point,\n  range\n}\n\n/**\n * Interface implemented by a historical date, as returned from the server.\n */\nexport interface HistoricalDateModel {\n  a: DatationModel;\n  b: DatationModel;\n}\n\n/**\n * A historical date, including 0, 1, or 2 datation points.\n */\nexport class HistoricalDate implements HistoricalDateModel {\n  public a: Datation;\n  public b: Datation;\n\n  constructor(date: HistoricalDateModel = null) {\n    if (!date) {\n      this.a = new Datation();\n    } else {\n      this.a = new Datation(date.a);\n      this.b = new Datation(date.b);\n    }\n  }\n\n  /**\n   * Parse the specified text representing a historical datation.\n   * @param text The text to be parsed.\n   * @param options The datation formatter options.\n   */\n  public static parse(text: string,\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS): HistoricalDate {\n    if (!text) {\n      return null;\n    }\n    const dates = text.split('--');\n    let s1 = dates[0].trim();\n    const s2 = dates.length > 1 ? dates[1].trim() : null;\n    if (!s1) {\n      return null;\n    }\n\n    const date = new HistoricalDate();\n    if (dates.length > 1) {\n      // if both terms are specified, integrate BC/AD indication in 1st if required\n      if (s1 && s2) {\n        const bcad = Datation.getErasOptionsForRegex(options);\n        const tailRegexp = new RegExp(\n          // era (1)\n          '(' + bcad[0] + '|' + bcad[1] + ')?' +\n          // dubious (2)\n          '(\\\\s*\\\\?)?' +\n          // hint (3)\n          '(?:\\\\s*\\\\{?:([^)]+)\\\\})?\\\\s*$', 'gi');\n        const m1 = tailRegexp.exec(s1);\n\n        // if 1st has no era try integration from 2nd\n        if (m1 && m1[1]) {\n          // get era from 2nd (if 2nd hasn't it too, give up and AD will be assumed)\n          const m2 = tailRegexp.exec(s2);\n          if (m2 && m2[1]) {\n            const era = m2[1] || 'p.C.';\n            const sb1: string[] = [];\n            if (m1.index > 0) {\n              sb1.push(s1.substr(0, m1.index));\n            }\n            sb1.push(' ' + era);\n            if (m1[2]) {\n              sb1.push('?');\n            }\n            if (m1[3]) {\n              sb1.push(` (${m1[3]})`);\n            }\n            s1 = sb1.join('');\n          }\n        }\n      }\n      date.setStartPoint(Datation.parse(s1, options));\n      date.setEndPoint(Datation.parse(s2, options));\n    } else {\n      const d = Datation.parse(s1, options);\n      if (d && !d.isUndefined()) {\n        date.setSinglePoint(d);\n      }\n    }\n\n    return date;\n  }\n\n  public getStartPoint(): Datation {\n    return this.getDateType() === HistoricalDateType.range ? this.a : null;\n  }\n\n  public setStartPoint(value: Datation) {\n    this.a = new Datation(value);\n    // it's a range, ensure max is not null\n    if (!this.b) {\n      this.b = new Datation();\n    }\n  }\n\n  public getEndPoint(): Datation {\n    return this.getDateType() === HistoricalDateType.range ? this.b : null;\n  }\n\n  public setEndPoint(value: Datation) {\n    this.b = new Datation(value);\n  }\n\n  public getSinglePoint(): Datation {\n    return this.getDateType() === HistoricalDateType.point ? this.a : null;\n  }\n\n  public setSinglePoint(value: Datation) {\n    this.a = new Datation(value);\n    // it's a point, ensure max is null\n    this.b = null;\n  }\n\n  /**\n   * True if this date is undefined.\n   */\n  public isUndefined(): boolean {\n    return !this.a ||\n      (this.a.isUndefined() && (!this.b || this.b.isUndefined()));\n  }\n\n  /**\n   * Get the type of this date.\n   */\n  public getDateType(): HistoricalDateType {\n    if (this.isUndefined()) {\n      return HistoricalDateType.undefined;\n    }\n    return this.b ? HistoricalDateType.range : HistoricalDateType.point;\n  }\n\n  /**\n   * Validate this date.\n   * @returns Error message if invalid, or null if valid.\n   */\n  public validate(): string {\n    if (!this.a) {\n      return 'Missing point A';\n    }\n\n    if (this.getDateType() === HistoricalDateType.range) {\n      const av = this.a.getSortValue();\n      const bv = this.b.getSortValue();\n      if (av && bv && av >= bv) {\n        return 'Point A is past point B';\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get the sort value for this date.\n   */\n  public getSortValue(): number {\n    switch (this.getDateType()) {\n      case HistoricalDateType.point:\n        return this.a.getSortValue();\n\n      case HistoricalDateType.range:\n        if (this.a.isUndefined()) {\n          return this.b.getSortValue() - APPROX_DELTA;\n        }\n        if (this.b.isUndefined()) {\n          return this.a.getSortValue() + APPROX_DELTA;\n        }\n        return (this.a.getSortValue() + this.b.getSortValue()) / 2;\n\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Build a textual representation of this date.\n   * @param format The format string.\n   * @param options The formatter options.\n   */\n  public toString(format = 'G',\n    options: DatationFormatOptions = DATATION_FORMAT_OPTIONS) {\n    const sb: string[] = [];\n\n    switch (this.getDateType()) {\n      case HistoricalDateType.point:\n        sb.push(this.a.toString(format, options));\n        break;\n\n      case HistoricalDateType.range:\n        // if both terms are present and belong to same era, omit it in 1st\n        if (!this.a.isUndefined() &&\n          this.b && !this.b.isUndefined() &&\n          this.a.value * this.b.value > 0) {\n          sb.push(this.a.toString(Datation.stripFormatStringEra(format), options));\n          sb.push(' -- ');\n          sb.push(this.b.toString(format, options));\n          break;\n        }\n\n        if (!this.a.isUndefined()) {\n          sb.push(this.a.toString(format, options) + ' ');\n        }\n        sb.push('--');\n        if (this.b && !this.b.isUndefined()) {\n          sb.push(this.b.toString(format, options));\n        }\n        break;\n    }\n\n    return sb.join('');\n  }\n\n  /**\n   * Get the approximate year value from the specified century value.\n   * @param century The century number, negative if B.C.\n   */\n  private centuryToYear(century: number): number {\n    return century * 100 + (century \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MspOperation.html":{"url":"classes/MspOperation.html","title":"class - MspOperation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MspOperation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/msp-operation.ts\n        \n\n            \n                Description\n            \n            \n                Misspelling operation.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _note\n                            \n                            \n                                    Private\n                                _operator\n                            \n                            \n                                    Private\n                                _tag\n                            \n                            \n                                    Private\n                                _valueA\n                            \n                            \n                                    Private\n                                _valueB\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    tag\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/msp-operation.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _operator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MspOperator\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/msp-operation.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _tag\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/msp-operation.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _valueA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/msp-operation.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _valueB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/msp-operation.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        tag\n                    \n                \n\n                \n                    \n                        gettag()\n                    \n                \n                            \n                                \n                                    Defined in libs/core/src/lib/msp-operation.ts:22\n                                \n                            \n\n                \n                    \n                        settag(value: string)\n                    \n                \n                            \n                                \n                                    Defined in libs/core/src/lib/msp-operation.ts:25\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        export enum MspOperator {\n  delete = 0,\n  replace,\n  insert,\n  move,\n  swap\n}\n\n/**\n * Misspelling operation.\n */\nexport class MspOperation {\n  private _operator: MspOperator;\n  private _tag: string;\n  private _note: string;\n  private _valueA: string;\n  private _valueB: string;\n\n  public get tag(): string {\n    return this._tag;\n  }\n  public set tag(value: string) {\n    this._tag = value;\n  }\n\n  // TODO: implement\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RomanNumber.html":{"url":"classes/RomanNumber.html","title":"class - RomanNumber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RomanNumber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/roman-number.ts\n        \n\n            \n                Description\n            \n            \n                Roman number converter.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _postAlpha\n                            \n                            \n                                    Private\n                                    Static\n                                _postVal\n                            \n                            \n                                    Private\n                                    Static\n                                _preAlpha\n                            \n                            \n                                    Private\n                                    Static\n                                _preVal\n                            \n                            \n                                    Private\n                                    Static\n                                _romanDigits\n                            \n                            \n                                    Private\n                                    Static\n                                _romanSubdigits\n                            \n                            \n                                    Private\n                                    Static\n                                _romanValues\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromRoman\n                            \n                            \n                                    Private\n                                    Static\n                                getRomanDigitValue\n                            \n                            \n                                    Private\n                                    Static\n                                isCaseEqual\n                            \n                            \n                                    Private\n                                    Static\n                                isLower\n                            \n                            \n                                    Private\n                                    Static\n                                isUpper\n                            \n                            \n                                    Static\n                                toRoman\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _postAlpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'm',\n    'd',\n    'c',\n    'l',\n    'x',\n    'v',\n    'M',\n    'D',\n    'C',\n    'L',\n    'X',\n    'V',\n    'I'\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _postVal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    1000000,\n    500000,\n    100000,\n    50000,\n    10000,\n    5000,\n    1000,\n    500,\n    100,\n    50,\n    10,\n    5,\n    1\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _preAlpha\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'cm',\n    'cd',\n    'xc',\n    'xl',\n    'ix',\n    'iv',\n    'CM',\n    'CD',\n    'XC',\n    'XL',\n    'IX',\n    'IV',\n    'I'\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _preVal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    900000,\n    400000,\n    90000,\n    40000,\n    9000,\n    4000,\n    900,\n    400,\n    90,\n    40,\n    9,\n    4,\n    1\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _romanDigits\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'IVXLCDM'\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _romanSubdigits\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : ' IIXXCC'\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _romanValues\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [1, 5, 10, 50, 100, 500, 1000]\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/roman-number.ts:69\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            fromRoman\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fromRoman(roman: string, allowBar)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:146\n                \n            \n\n\n            \n                \n                    Convert the specified Roman number to a numeric value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    roman\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        : The Roman number.\n\n                                    \n                                \n                                \n                                    allowBar\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        : True to allow bar-on-letter notation.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            getRomanDigitValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRomanDigitValue(digit: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    digit\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            isCaseEqual\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isCaseEqual(c1: string, c2: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c1\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    c2\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            isLower\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isLower(c: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            isUpper\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isUpper(c: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    c\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            toRoman\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toRoman(value: number, allowBar, allowPrefix, ancient)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/roman-number.ts:80\n                \n            \n\n\n            \n                \n                    Convert the specified numeric value to a Roman number.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The value.\n\n                                    \n                                \n                                \n                                    allowBar\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        True to allow bar on letters. A bar on a letter\nmultiplies its value by 1000.\n\n                                    \n                                \n                                \n                                    allowPrefix\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                    \n                                        True to allow prefix notation.\n\n                                    \n                                \n                                \n                                    ancient\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        True to use the ancient preferred notation, i.e.\nthe preferred epigraphical notation (IIII instead of IV, VIIII instead of IX).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { stringify } from 'querystring';\n\n/**\n * Roman number converter.\n */\nexport class RomanNumber {\n  private static _postVal = [\n    1000000,\n    500000,\n    100000,\n    50000,\n    10000,\n    5000,\n    1000,\n    500,\n    100,\n    50,\n    10,\n    5,\n    1\n  ];\n  private static _postAlpha = [\n    'm',\n    'd',\n    'c',\n    'l',\n    'x',\n    'v',\n    'M',\n    'D',\n    'C',\n    'L',\n    'X',\n    'V',\n    'I'\n  ];\n  private static _preVal = [\n    900000,\n    400000,\n    90000,\n    40000,\n    9000,\n    4000,\n    900,\n    400,\n    90,\n    40,\n    9,\n    4,\n    1\n  ];\n  private static _preAlpha = [\n    'cm',\n    'cd',\n    'xc',\n    'xl',\n    'ix',\n    'iv',\n    'CM',\n    'CD',\n    'XC',\n    'XL',\n    'IX',\n    'IV',\n    'I'\n  ];\n  private static _romanDigits = 'IVXLCDM';\n  private static _romanSubdigits = ' IIXXCC';\n  private static _romanValues = [1, 5, 10, 50, 100, 500, 1000];\n\n  /**\n   * Convert the specified numeric value to a Roman number.\n   * @param value The value.\n   * @param allowBar True to allow bar on letters. A bar on a letter\n   * multiplies its value by 1000.\n   * @param allowPrefix True to allow prefix notation.\n   * @param ancient True to use the ancient preferred notation, i.e.\n   * the preferred epigraphical notation (IIII instead of IV, VIIII instead of IX).\n   */\n  public static toRoman(\n    value: number,\n    allowBar = true,\n    allowPrefix = true,\n    ancient = false\n  ): string {\n    if (value  0) {\n      while (value >= this._postVal[place]) {\n        sb.push(this._postAlpha[place]);\n        value -= this._postVal[place];\n      }\n\n      if (allowPrefix) {\n        if (value >= this._preVal[place]) {\n          sb.push(this._preAlpha[place]);\n          value -= this._preVal[place];\n        }\n      }\n      place++;\n    }\n\n    if (ancient) {\n      let s = sb.join('');\n      s = s.replace('IV', 'IIII');\n      return s.replace('IX', 'VIII');\n    }\n\n    return sb.join('');\n  }\n\n  private static isLower(c: string): boolean {\n    return c.toLowerCase() === c;\n  }\n\n  private static isUpper(c: string): boolean {\n    return c.toUpperCase() === c;\n  }\n\n  private static isCaseEqual(c1: string, c2: string): boolean {\n    return (\n      (this.isLower(c1) && this.isLower(c2)) ||\n      (this.isUpper(c1) && this.isUpper(c2))\n    );\n  }\n\n  private static getRomanDigitValue(digit: string): number {\n    const i = this._romanDigits.indexOf(digit.toUpperCase());\n    if (i === -1) {\n      return 0;\n    }\n    return this.isLower(digit)\n      ? this._romanValues[i] * 1000\n      : this._romanValues[i];\n  }\n\n  /**\n   * Convert the specified Roman number to a numeric value.\n   * @param roman: The Roman number.\n   * @param allowBar: True to allow bar-on-letter notation.\n   */\n  public static fromRoman(roman: string, allowBar = true): number {\n    if (!roman) {\n      return 0;\n    }\n    let result = 0;\n    if (!allowBar) {\n      roman = roman.toUpperCase();\n    }\n    for (let index = 0; index  0) {\n        const i = this._romanDigits.indexOf(roman[index]);\n        if (\n          roman[index - 1].toUpperCase() ===\n            this._romanSubdigits[i].toUpperCase() &&\n          this.isCaseEqual(roman[index - 1], roman[index])\n        ) {\n          // tslint:disable-next-line:no-bitwise\n          result -= this.getRomanDigitValue(this._romanSubdigits[i]) \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextRange.html":{"url":"classes/TextRange.html","title":"class - TextRange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextRange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/text-range.ts\n        \n\n            \n                Description\n            \n            \n                A simple text range, expressed as start character index and characters\nlength. This is used for misspellings operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                length\n                            \n                            \n                                    Public\n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                end\n                            \n                            \n                                    Public\n                                isEqual\n                            \n                            \n                                    Static\n                                parse\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(start: number, length: number)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/text-range.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        start\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        length\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            length\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/text-range.ts:14\n                            \n                        \n\n                \n                    \n                        The length in characters.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/text-range.ts:9\n                            \n                        \n\n                \n                    \n                        The start character index.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            end\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    end()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/text-range.ts:47\n                \n            \n\n\n            \n                \n                    Get the inclusive end of the range.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isEqual\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEqual(other: TextRange)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/text-range.ts:56\n                \n            \n\n\n            \n                \n                    True if this range value is equal to the other range value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    other\n                                    \n                                                TextRange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The other range.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            parse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parse(text: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/text-range.ts:22\n                \n            \n\n\n            \n                \n                    Parse the specified text representing a range, in the form \"startxlength\"\nor just \"start\" when length is 1.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         TextRange\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in libs/core/src/lib/text-range.ts:67\n                \n            \n\n\n            \n                \n                    Get a parsable textual representation of this range.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Text.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class TextRange {\n  /**\n   * The start character index.\n   */\n  public start: number;\n\n  /**\n   * The length in characters.\n   */\n  public length: number;\n\n  /**\n   * Parse the specified text representing a range, in the form \"startxlength\"\n   * or just \"start\" when length is 1.\n   *\n   * @param text The text.\n   */\n  public static parse(text: string): TextRange {\n    if (!text) {\n      throw new Error('No range text to be parsed');\n    }\n    // [1]=start, ([2]=length)\n    const m = new RegExp('(\\\\d+)(?:[×x](\\\\d+))?', 'gm').exec(text);\n    if (!m) {\n      throw new Error(`Invalid range text: \"${text}\"`);\n    }\n    return new TextRange(\n      parseInt(m[1], 10),\n      m[2]? parseInt(m[2], 10) : 1);\n  }\n\n  constructor(start: number, length: number) {\n    if (start  0? n - 1 : 0;\n  }\n\n  /**\n   * True if this range value is equal to the other range value.\n   * @param other The other range.\n   */\n  public isEqual(other: TextRange): boolean {\n    if (!other) {\n      return false;\n    }\n    return this.start === other.start && this.length === other.length;\n  }\n\n  /**\n   * Get a parsable textual representation of this range.\n   * @returns Text.\n   */\n  public toString(): string {\n    return this.length === 1\n      ? this.start.toString()\n      : `${this.start}×${this.length}`;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/core/src/lib/datation.ts\n            \n            class\n            Datation\n            \n                52 %\n                (13/25)\n            \n        \n        \n            \n                \n                libs/core/src/lib/datation.ts\n            \n            interface\n            DatationFormatOptions\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                libs/core/src/lib/datation.ts\n            \n            interface\n            DatationModel\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                libs/core/src/lib/datation.ts\n            \n            variable\n            DATATION_FORMAT_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/historical-date.ts\n            \n            class\n            HistoricalDate\n            \n                55 %\n                (11/20)\n            \n        \n        \n            \n                \n                libs/core/src/lib/historical-date.ts\n            \n            interface\n            HistoricalDateModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                libs/core/src/lib/historical-date.ts\n            \n            variable\n            APPROX_DELTA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/msp-operation.ts\n            \n            class\n            MspOperation\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                libs/core/src/lib/roman-number.ts\n            \n            class\n            RomanNumber\n            \n                21 %\n                (3/14)\n            \n        \n        \n            \n                \n                libs/core/src/lib/text-range.ts\n            \n            class\n            TextRange\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^8.2.0\n        \n            @angular/common : ^8.2.0\n        \n            @angular/compiler : ^8.2.0\n        \n            @angular/core : ^8.2.0\n        \n            @angular/forms : ^8.2.0\n        \n            @angular/platform-browser : ^8.2.0\n        \n            @angular/platform-browser-dynamic : ^8.2.0\n        \n            @angular/router : ^8.2.0\n        \n            @nrwl/angular : 8.7.1\n        \n            core-js : ^2.5.4\n        \n            diff-match-patch : ^1.0.4\n        \n            rxjs : ~6.4.0\n        \n            zone.js : ^0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HistoricalDateType   (libs/.../historical-date.ts)\n                        \n                        \n                            MspOperator   (libs/.../msp-operation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/core/src/lib/historical-date.ts\n    \n        \n            \n                \n                    \n                        \n                        HistoricalDateType\n                    \n                \n                    \n                        \n                            Type of historical date.\n\n                        \n                    \n                        \n                            \n                                 undefined\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 point\n                            \n                        \n                        \n                            \n                                 range\n                            \n                        \n            \n        \n\n    libs/core/src/lib/msp-operation.ts\n    \n        \n            \n                \n                    \n                        \n                        MspOperator\n                    \n                \n                    \n                        \n                            Misspelling operator type.\n\n                        \n                    \n                        \n                            \n                                 delete\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 replace\n                            \n                        \n                        \n                            \n                                 insert\n                            \n                        \n                        \n                            \n                                 move\n                            \n                        \n                        \n                            \n                                 swap\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCadmus\nThis project was generated using Nx.\n&#x1F50E; Nx is a set of Extensible Dev Tools for Monorepos.\nQuick Start & Documentation\nNx Documentation\n10-minute video showing all Nx features\nInteractive Tutorial\nAdding capabilities to your workspace\nNx supports many plugins which add capabilities for developing different types of applications and different tools.\nThese capabilities include generating applications, libraries, etc as well as the devtools to test, and build projects as well.\nBelow are some plugins which you can add to your workspace:\n\nAngular\nng add @nrwl/angular\n\n\nReact\nng add @nrwl/react\n\n\nWeb (no framework frontends)\nng add @nrwl/web\n\n\nNest\nng add @nrwl/nest\n\n\nExpress\nng add @nrwl/express\n\n\nNode\nng add @nrwl/node\n\n\n\nGenerate an application\nRun ng g @nrwl/angular:app my-app to generate an application.\n\nYou can use any of the plugins above to generate applications as well.\n\nWhen using Nx, you can create multiple applications and libraries in the same workspace.\nGenerate a library\nRun ng g @nrwl/angular:lib my-lib to generate a library.\n\nYou can also use any of the plugins above to generate libraries as well.\n\nLibraries are sharable across libraries and applications. They can be imported from @cadmus/mylib.\nDevelopment server\nRun ng serve my-app for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng g component my-component --project=my-app to generate a new component.\nBuild\nRun ng build my-app to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test my-app to execute the unit tests via Jest.\nRun nx affected:test to execute the unit tests affected by a change.\nRunning end-to-end tests\nRun ng e2e my-app to execute the end-to-end tests via Cypress.\nRun nx affected:e2e to execute the end-to-end tests affected by a change.\nUnderstand your workspace\nRun nx dep-graph to see a diagram of the dependencies of your projects.\nFurther help\nVisit the Nx Documentation to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            APPROX_DELTA   (libs/.../historical-date.ts)\n                        \n                        \n                            DATATION_FORMAT_OPTIONS   (libs/.../datation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/core/src/lib/historical-date.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            APPROX_DELTA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n\n            \n        \n\n    libs/core/src/lib/datation.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DATATION_FORMAT_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DatationFormatOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  aboutText: 'c.',\n  bcText: 'BC',\n  adText: 'AD',\n  dayNames: [\n    'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'\n  ],\n  monthNames: [\n    'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'\n  ]\n}\n                        \n                    \n\n                \n                    \n                        Default options for formatting a datation.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
